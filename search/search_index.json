{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udf89 Welcome To The Field Tasking Manager Documentation \ud83c\udf89","text":"<p>FieldTM is a versatile mapping tool, used for coordinating groups of mappers during field mapping campaigns.</p> <p>Examples of data collected may be population information from household enumeration surveys, post-disaster damage assessment, or simply enhancing OpenStreetMap through the addition of field-verified tags.</p>"},{"location":"#what-is-one-thing-all-the-greatest-solutions-out-there-have-in-common","title":"What is ONE thing all the greatest solutions out there have in common?","text":"<p>They never forget the people they are building for \ud83e\udd17</p> <p>So who are we building field mapping solutions for? In short, we build solutions for:</p>"},{"location":"#the-field-mapping-manager-coordinating-field-mapping","title":"The field mapping manager (coordinating field mapping)","text":"<p>The field mapping manager is responsible for coordinating field mapping activities, ensuring the accuracy and completeness of the data collected, and managing the data itself. This involves a number of key steps, including:</p> <ul> <li>Planning: The field mapping manager must develop a clear plan   for the data collection process, including identifying key areas of   focus and establishing timelines and targets.</li> </ul> <ul> <li>Recruitment: The field mapping manager must recruit and train   field mappers, ensuring that they have the necessary skills and   expertise to collect accurate and high-quality data.</li> </ul> <ul> <li> <p>Coordination: The field mapping manager must coordinate the activities   of the field mappers, ensuring that they are working together   effectively and efficiently.</p> <p></p> </li> </ul>"},{"location":"#the-field-mapper-collecting-data","title":"The field mapper (collecting data)","text":"<p>The field mapper is responsible for collecting data in the field. To ensure the success of the field mapper, we must consider a number of key factors. These include:</p> <ul> <li>Ease of use: The field mapper must be able to easily and efficiently   collect data, without requiring extensive training or technical   expertise.</li> </ul> <ul> <li>Accessibility: The field mapper must be able to access and   collect data from a wide range of environments, including remote or   hard-to-reach locations.</li> </ul> <ul> <li>Data quality: The field mapper must be able to ensure the accuracy and   completeness of the data they collect, as well as identify and address   any errors or issues that arise.</li> </ul>"},{"location":"#the-validator-quality-checking-the-data","title":"The validator (quality checking the data)","text":"<p>The validator is responsible for quality checking the data collected by the field mapper, ensuring that it is accurate, complete, and free from errors. The validator faces a number of challenges and issues, including:</p> <ul> <li>Incomplete or inaccurate data: The validator must identify and   address any data that is incomplete, inaccurate, or otherwise flawed.</li> </ul> <ul> <li>Conflicting data: The validator may encounter data that   conflicts with other data sources, requiring them to identify and   resolve any discrepancies.</li> </ul> <ul> <li>Data validation protocols: The validator must adhere to strict   validation protocols and guidelines, ensuring that the data meets a high   level of quality and accuracy.</li> </ul>"},{"location":"#detailed-role-breakdown","title":"Detailed role breakdown","text":"<p>Click here to see the initial plan we made for the roles present in FieldTM and click here to for further details about each role available.</p>"},{"location":"CONTRIBUTING/","title":"\ud83e\udd17 Welcome","text":"<p> First off, We are really glad you're reading this, because we need volunteer developers to help improve the Field Tasking Manager (Field-TM)! </p> <p>We welcome and encourage contributors of all skill levels, and we are committed to making sure your participation is inclusive, enjoyable, and rewarding. If you have never contributed to an open source project before, we are a good place to start, and we will make sure you are supported every step of the way. If you have any questions, please ask!</p> <p>You can see an overview of the project and the process we have gone through in developing Field-TM so far in these slides</p> <p>Furthermore, there are many ways to contribute to the Field Tasking Manager (Field-TM), which includes:</p>"},{"location":"CONTRIBUTING/#testing","title":"Testing","text":"<p>Right now, we are in the process of building the prototype. We warmly welcome your input in testing and sharing your feedback. If you are also interested in coordinating a field testing session, please reach out!</p>"},{"location":"CONTRIBUTING/#code-contributions","title":"Code contributions","text":"<p>Create pull requests (PRs) for changes that you think are needed. We would really appreciate your help!</p> <p>Skills with the following would be beneficial:</p> <ul> <li>Python</li> <li>FastAPI</li> <li>TypeScript / JavaScript</li> <li>React</li> <li>Docker</li> <li>CI/CD workflows</li> </ul> <p>Our latest task board can be found here.</p>"},{"location":"CONTRIBUTING/#report-bugs-and-suggest-improvements","title":"Report bugs and suggest improvements","text":"<p>The issue queue is the best way to get started. There are issue templates for BUGs and FEATURES that you can use, you could also create your own.</p> <p>Once you have submitted an issue, it will be assigned one label from the following label categories.</p> <p>If you are wondering where to start, you can filter by the good first issue label.</p>"},{"location":"CONTRIBUTING/#report-security-vulnerabilities","title":"Report security vulnerabilities","text":"<p>Please inform a maintainer as soon as possible, including the CVE code.</p> <p>Message via the HOTOSM Slack or direct email would be preferred, but via Github issue is also possible.</p>"},{"location":"CONTRIBUTING/#thank-you","title":"Thank you","text":"<p>Thank you very much in advance for your contributions!! Please ensure you refer to our Code of Conduct. If you've read the guidelines, but are still not sure how to contribute on Github, please reach out to us via our Slack #geospatial-tech-and-innovation.</p>"},{"location":"CONTRIBUTING/#code-contribution-guidelines","title":"Code Contribution guidelines","text":""},{"location":"CONTRIBUTING/#workflow","title":"Workflow","text":"<p>We operate the \"Fork &amp; Pull\" model explained at About Pull Requests</p> <p>Further details of our development workflow can be found here</p>"},{"location":"CONTRIBUTING/#if-you-are-reporting-a-problem","title":"If you are reporting a problem","text":"<ul> <li>Describe exactly what you were trying to achieve, what you did, what you   expected to happen and what did happen instead. Include relevant information   about the platform, OS version etc. you are using. Include shell commands you   typed in, log files, errors messages etc.</li> </ul> <ul> <li>Please open a separate issue for each problem, question, or comment you have.   Do not reuse existing issues for other topics, even if they are similar. This   keeps issues small and manageable and makes it much easier to follow through   and make sure each problem is taken care of.</li> </ul>"},{"location":"CONTRIBUTING/#documentation","title":"Documentation","text":"<p>Project documentation should be in Markdown format, and in a docs subdirectory. While it is possible to use HTML in Markdown documents for tables and images, it is preferred to use the Markdown style as it's much easier to read.</p> <p>See a detailed guide on documentation contributions here.</p>"},{"location":"CONTRIBUTING/#pre-commit-hooks","title":"Pre-Commit Hooks","text":"<p>Pre-Commit Hooks are used in this repo to enforce coding style:</p> <ul> <li>Python adheres mostly to PEP8 convention, amongst others, using the   tool <code>ruff</code>.</li> <li>TypeScript / JavaScript code is formatted using <code>prettier</code>.</li> <li>Markdown files are formatted using <code>markdownlint</code>.</li> <li>Raq SQL is formatted using <code>sqlfluff</code>.</li> </ul> <p>Please install the pre-commit hooks before contributing:</p> <pre><code>pip install pre-commit\npre-commit install\n</code></pre>"},{"location":"CONTRIBUTING/#commit-sign-off-policy","title":"Commit Sign-Off Policy","text":"<ul> <li>In order to commit to this repository, please read and accept our   commit sign-off policy</li> <li>This is simply to verify that you are the author of the commits you make.</li> <li>If possible, please add to your commit footer the <code>Signed-off-by</code> info:   <code>Signed-off-by: John Doe &lt;joe.doe@example.com&gt;</code></li> </ul>"},{"location":"CONTRIBUTING/#our-development-practices","title":"Our Development Practices","text":"<p>To see more detail on the development practices used at HOT, please visit this page</p>"},{"location":"INSTALL/","title":"Installation","text":""},{"location":"INSTALL/#software-requirements","title":"Software Requirements","text":"<p>It is recommended to run Field-TM on a Linux-based machine.</p> <p>This includes MacOS, but some tools must be substituted.</p> <p>For Windows users, the easiest option is to use Windows Subsystem for Linux</p> <p>Before you can install and use this application, you will need to have the following software installed and configured on your system:</p> <p>If running Debian/Ubuntu, the install script below does this for you.</p> <p>Git to clone the Field-TM repository.</p> <p>Docker to run Field-TM inside containers.</p> <p>Docker Compose for easy orchestration of the Field-TM services.</p> <p>This is Docker Compose V2, the official Docker CLI plugin.</p> <p>i.e. <code>docker compose</code> commands, not <code>docker-compose</code> (the old tool).</p>"},{"location":"INSTALL/#easy-install","title":"Easy Install","text":"<p>On a Linux-based machine with <code>bash</code> installed, run the script:</p> <p>Note: it is best to run this script as a user other than root.</p> <p>However, if you run as root, a user svcfmtm will be created for you.</p> <pre><code>curl -L https://get.fmtm.dev -o install.sh\nbash install.sh\n\n# Then follow the prompts\n</code></pre>"},{"location":"INSTALL/#manual-install","title":"Manual Install","text":"<p>If more details are required, check out the dev docs</p>"},{"location":"INSTALL/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Installation<ul> <li>Software Requirements</li> <li>Easy Install</li> <li>Manual Install<ul> <li>Table of Contents</li> <li>Clone the Field-TM repository</li> <li>Setup Your Local Environment<ul> <li>1. Setup OSM OAUTH 2.0</li> <li>2. Create an <code>.env</code> File</li> </ul> </li> <li>Start the API with Docker<ul> <li>Select the install type</li> <li>Pull the Images</li> <li>Build the Frontend</li> <li>Start the Containers</li> </ul> </li> <li>Setup ODK Central User (Optional)</li> <li>Set Up Monitoring (Optional)</li> <li>Check Authentication (Optional)</li> <li>Configure Custom Branding</li> </ul> </li> </ul> </li> </ul>"},{"location":"INSTALL/#clone-the-field-tm-repository","title":"Clone the Field-TM repository","text":"<p>Clone the repository to your local machine using the following command:</p> <pre><code>git clone https://github.com/hotosm/field-tm.git\n\n# If you wish to deploy for production, change to the main branch\ngit checkout main\n</code></pre>"},{"location":"INSTALL/#setup-your-local-environment","title":"Setup Your Local Environment","text":"<p>These steps are essential to run and test your code!</p>"},{"location":"INSTALL/#1-setup-osm-oauth-20","title":"1. Setup OSM OAuth 2.0","text":"<p>The Field-TM uses OAuth with OSM to authenticate users.</p> <p>To properly configure your Field-TM project, you will need to create keys for OSM.</p> <ol> <li> <p>Login to OSM    (If you do not have an account yet, click the signup    button at the top navigation bar to create one).</p> <p>Click the drop down arrow on the top right of the navigation bar  and select My Settings.</p> </li> <li> <p>Register your Field-TM instance to OAuth 2 applications.</p> <p>Put your login redirect url as <code>http://127.0.0.1:7051/osmauth</code> if running locally,  or for production replace with https://{YOUR_DOMAIN}/osmauth</p> <p>Note: <code>127.0.0.1</code> is required for debugging instead of <code>localhost</code> due to OSM restrictions.</p> <p></p> </li> <li> <p>Add required permissions:</p> <ul> <li>'Read user preferences' (<code>read_prefs</code>)</li> <li>'Send private messages to other users' (<code>send_messages</code>)</li> </ul> </li> <li> <p>Now save your Client ID and Client Secret for the next step.</p> </li> </ol>"},{"location":"INSTALL/#2-create-an-env-file","title":"2. Create an <code>.env</code> File","text":"<p>Environmental variables are used throughout this project. To get started, create <code>.env</code> file in the top level dir, a sample is located at <code>.env.example</code>.</p> <p>This can be created interactively by running:</p> <pre><code>bash scripts/1-environment/gen-env.sh\n</code></pre> <p>Note: If extra cors origins are required for testing, the variable <code>EXTRA_CORS_ORIGINS</code> is a set of comma separated strings, e.g.: http://fmtm.localhost:7050,http://some.other.domain</p> <p>Note: It is possible to generate the auth pub/priv key manually using: openssl genrsa -out field-tm-private.pem 4096 openssl rsa -in field-tm-private.pem -pubout -out field-tm-private.pem</p>"},{"location":"INSTALL/#start-the-api-with-docker","title":"Start the API with Docker","text":"<p>This is the easiest way to get started with Field-TM.</p> <p>Docker runs each service inside containers, fully isolated from your host operating system.</p>"},{"location":"INSTALL/#select-the-install-type","title":"Select the install type","text":"<p>Determine the what type of Field-TM install you would like:</p> <pre><code>main - the latest production\nstaging - the latest staging\ndev - the latest development (warning: may be unstable)\nlocal dev - used during development, or to start a test version\n</code></pre> <p>The corresponding docker-compose files are:</p> <pre><code>main - deploy/compose.main.yaml\nstaging - deploy/compose.staging.yaml\ndev - deploy/compose.dev.yaml\nlocal test - compose.yaml\n</code></pre> <p>Set your selection to a terminal variable to make the next step easier:</p> <pre><code>export COMPOSE_FILE={your_selection}\n\n# E.g.\nexport COMPOSE_FILE=deploy/compose.dev.yaml\n</code></pre>"},{"location":"INSTALL/#pull-the-images","title":"Pull the Images","text":"<pre><code>docker compose -f \"${COMPOSE_FILE}\" pull\n</code></pre> <p>This will pull the latest containers for the branch you selected.</p>"},{"location":"INSTALL/#build-the-frontend","title":"Build the Frontend","text":"<p>Before we can run, you need to build your version of the frontend.</p> <p>This is because the frontend contains variable specific to your deployment.</p> <pre><code>docker compose -f \"${COMPOSE_FILE}\" build ui\n</code></pre>"},{"location":"INSTALL/#start-the-containers","title":"Start the Containers","text":"<pre><code>docker compose -f \"${COMPOSE_FILE}\" up -d\n</code></pre> <p>You should see the containers start up in order.</p> <p>Once complete, you should now be able to navigate to the project in your browser:</p> <pre><code>https://{YOUR_DOMAIN}\n\n# For the local test setup, this will be\nhttp://fmtm.localhost:7050\n</code></pre> <p>Note: If those link doesn't work, check the logs with <code>docker compose logs api</code>.</p> <p>Note: Use <code>docker ps</code> to view all container names.</p>"},{"location":"INSTALL/#setup-odk-central-user-optional","title":"Setup ODK Central User (Optional)","text":"<p>The Field-TM uses ODK Central to store ODK data.</p> <ul> <li>By default, the docker setup includes a Central server.</li> <li>The credentials should have been provided in your <code>.env</code>   file to automatically create a user.</li> <li>To create a user manually:</li> </ul> <pre><code>docker compose exec central odk-cmd --email YOUREMAIL@ADDRESSHERE.com user-create\ndocker-compose exec central odk-cmd --email YOUREMAIL@ADDRESSHERE.com user-promote\n</code></pre> <p>Note: Alternatively, you may use an external Central server and user.</p>"},{"location":"INSTALL/#set-up-monitoring-optional","title":"Set Up Monitoring (Optional)","text":"<ul> <li>There is an optional configuration for application monitoring via OpenTelemetry.</li> <li> <p>To enable this set in your <code>.env</code> file:</p> <pre><code># For OpenObserve\nMONITORING=\"openobserve\"\n# For Sentry\nMONITORING=\"sentry\"\n</code></pre> </li> </ul> <ul> <li>Check the <code>.env.example</code> for additional required parameters.</li> <li>Everything should be configured for you to see endpoint calls in the   selected web dashboard, providing full error tracebacks and stats.</li> </ul>"},{"location":"INSTALL/#check-authentication-optional","title":"Check Authentication (Optional)","text":"<p>Once you have deployed, you will need to check that you can properly authenticate.</p> <ol> <li> <p>Navigate to your frontend (e.g. <code>http://fmtm.localhost:7050</code>)</p> </li> <li> <p>Click the 'Sign In' button and follow the popup prompts.</p> </li> <li> <p>If successful, you should see your username in the header.</p> </li> <li> <p>If you see an error instead, double check your credentials and    redirect URL in the openstreetmap.org settings.</p> </li> </ol>"},{"location":"INSTALL/#frontend-customization-optional","title":"Frontend Customization (Optional)","text":"<ul> <li>It's possible to tailor the mapper portion of Field-TM to your needs   (the main app that users will see).</li> <li> <p>There is a <code>config.json</code> file that is used to dynamically modify the frontend   deployment:</p> <pre><code>{\n  \"logoUrl\": \"/favicon.svg\",\n  \"logoText\": \"Humanitarian OpenStreetMap Team\",\n  \"cssFile\": \"https://cdn.jsdelivr.net/npm/@hotosm/ui@0.2.0-b6/dist/style.css\",\n  \"enableWebforms\": false,\n  \"loginProviders\": {\n    \"osm\": true,\n    \"google\": true\n  },\n  \"sidebarItemsOverride\": []\n}\n</code></pre> </li> </ul> <ul> <li>This is read from the bundled Minio S3 bucket called <code>fmtm-data</code>:   <code>https://s3.{YOUR_FIELDTM_DOMAIN}/fmtm-data/frontend/config.json</code></li> <li>Under the <code>fmtm-data/frontend</code> path you can modify the <code>config.json</code>,   and also upload things like CSS files and logos.</li> </ul>"},{"location":"INSTALL/#configure-custom-branding","title":"Configure Custom Branding","text":"<ul> <li>It's possible to replace the HOTOSM logo and change the colour scheme for your   deployment.</li> <li> <p>This file will be automatically picked up and used to style your application.   By default, Field-TM will fallback to the bundled <code>config.json</code>.</p> <pre><code>{\n    ...\n    \"logoUrl\": \"/favicon.svg\",\n    \"logoText\": \"Humanitarian OpenStreetMap Team\",\n    \"cssFile\": \"https://cdn.jsdelivr.net/npm/@hotosm/ui@0.2.0-b6/dist/style.css\"\n}\n</code></pre> </li> </ul>"},{"location":"INSTALL/#configure-custom-favicon","title":"Configure Custom Favicon","text":"<ul> <li>During deploy, place your <code>favicon.svg</code> in the root of the repo.</li> <li>Run the deployment script, and the favicon + generated PNG version   will be used in your frontend deployment automatically.</li> </ul>"},{"location":"INSTALL/#configure-custom-sidebar-elements","title":"Configure Custom Sidebar Elements","text":"<ul> <li>By default Field-TM has a few items in the sidebar, like a link to a support   page, and other resources.</li> <li> <p>These links can be overridden using the <code>sidebarItemsOverride</code> parameter in   the <code>config.json</code>, which expects format:</p> <pre><code>{\n    ...\n    \"sidebarItemsOverride\": [\n        {\n            \"name\": \"Your Website\",\n            \"path\": \"https://yourwebsite.com\"\n        },\n        {\n            \"name\": \"Support\",\n            \"path\": \"https://docs.fmtm.dev/about/about/\"\n        }\n    ]\n}\n</code></pre> </li> </ul>"},{"location":"INSTALL/#enabled-disable-auth-providers","title":"Enabled / Disable Auth Providers","text":"<ul> <li> <p>We are continually adding new OAuth provider options.</p> <pre><code>{\n  ...\n    \"loginProviders\": {\n        \"osm\": true,\n        \"google\": true\n    }\n}\n</code></pre> </li> </ul> <p>That's it, you have successfully set up Field-TM!!</p>"},{"location":"qrcode-util/","title":"QRCode Converter","text":""},{"location":"timeline/","title":"Timeline","text":"<p>In reverse chronological order, with most recent events first.</p> <p> 2025-06 Project: Mapa das Periferias         \ud83d\udcbc Pilot project in Brazil to map favelas country-wide.          2025-05 Project: Suryodaya, Nepal         \ud83d\udcbc First mapping project with up to 450 mappers!          2025-04 Web Forms Release         \ud83d\udcf1 Release of 'web forms', allowing for mapping entirely         in Field-TM, without having to switch to ODK Collect.          2025-01 Project: KYC, Ghana         \ud83d\udcbc Another SDI project, mapping informal settlements in Ghana.          2025-01 Project: Tokha, Nepal         \ud83d\udcbc A project to map all buildings, and associated roads,         in the Tokha municipality in Nepal.          2024-12 Mapper Frontend Release         \ud83d\udcf1 Release of the 'mapper frontend', a streamlined and         intuitive mapping experience optimised for mobile devices.          2024-10 Project: Mwanza, Tanzania         \ud83d\udcbc Project alongside Slum Dwellers International (SDI), mapping         informal settlements in the Mwanza region.          2024-09 Project: Freetown, Sierra Leone         \ud83d\udcbc Part of an E2E household enumeration survey together with the         community of Jai-Mata, an informal settlement in Freetown.          2024-07 Community Webinar 2         \ud83c\udfa5 Public webinar displaying Field-TM's current capabilities and building         partnerships.          2024-07 Demo: Alpa Corral, Argentina          \ud83d\ude80 Field test with over 100 users for fire hazard assessment         and prevention mapping.          2024-06 Demo: Karangasem, Bali (v2)         \ud83d\ude80 Further refinement of E2E workflow in conjunction with imagery         from Drone Tasking Manager.          2024-04 Demo: CLIGEOS, Nepal         \ud83d\ude80 Demo of Field-TM within a full E2E workshop.          2024-03 Demo: Karangasem, Bali         \ud83d\ude80 Landslide risk assessment, refinement of the E2E workflow.          2024-03 Public Beta Release         \ud83c\udd95 A big push to get the public beta released 1st March. Open for         testing by the public.          2024-02 Demo: Monrovia, Liberia         \ud83d\ude80 The first conceptualisation of HOT's full E2E workflow, after field         mapping feedback          (info).          2023-08 Rapid Development &amp; Iteration of Field-TM         \ud83c\udfd7\ufe0f Growth phase of Field-TM with large improvements to the Field-TM         workflow &amp; usability.          2023-08 Demo: Rwanda Road Assessment         \ud83d\ude80 Rwanda building and road assessment after severe flooding.          2023-05 Hackathon         \ud83d\udc68\u200d\ud83d\udcbb A hackathon was conducted by NAXA for the task splitting         algorithm.          2023-03 NAXA Awarded Contract to Assist Field-TM Development         \ud83d\udcbb HOT's main collaborator on Field-TM, NAXA, was contracted to continue         development.          2023-02 Demo: Response to Turkey/Syria Earthquake         \ud83d\ude80 A call was made for open-source software developers to assist rapid         development for the earthquake response.          2022-12 Demo: DRC, Kenya, Tanzania         \ud83d\ude80 From Dec 2022 - Jan 2023 initial tests conducted with Field-TM         demonstrate its potential as a project.          2022-11 Backend API &amp; Mobile Design         \ud83d\udcf1 The mobile UI was prototyped &amp; first version of Field-TM API (server)         created.          2022-10 Project Start         \ud83c\udfc1 Design sprint &amp; first commit to the Github project.          2022-09 Initial Research &amp; Concept         \ud83d\udd2c Concept Note written for a 'Field Tasking Manager'.          </p>"},{"location":"wiki_redirect/","title":"Field-TM","text":"<p>Please see the docs page at: https://docs.fmtm.dev/</p>"},{"location":"about/about/","title":"\ud83d\udcd6 History","text":""},{"location":"about/about/#how-was-field-tm-born","title":"How was Field-TM born?","text":"<p>It started as Ivan's idea to build Field-TM (Ivan Gayton is Senior Humanitarian Advisor at Humanitarian OpenStreetMap Team) which then became a collaborative project with the efforts of Ivan, Rob Savoye who is Senior Technical Lead at Humanitarian OpenStreetMap Team and many other members from HOT as well as volunteers interested in the project.</p> <p>HOT uses ODK heavily, but most of the data never makes it into OSM because all the data processing is manual and slow, so it doesn't get done.</p> <p>Ivan Gayton (Senior Humanitarian Advisor at Humanitarian OpenStreetMap Team) heard about what Rob was working on and goes \"That's the missing piece I needed!\". He'd been wanting to build Field-TM for years, but lacked the ability to process the data.</p> <p>A webinar then took place in September 2022 that showcased the high interest from the community and the need for collaborative field mapping that really kicked off the starting point for building the Field Tasking Manager.</p> <p>Want to know about OSM-Fieldwork project? click here</p>"},{"location":"about/about/#a-project-to-provide-tools-for-open-mapping-campaigns","title":"A project to provide tools for Open Mapping campaigns","text":"<p>The Field Tasking Manager (Field-TM) is a project that aims to provide tools for coordinating field mapping activities in Open Mapping campaigns. While there are existing field mapping applications, there is a lack of efficient tools to coordinate these activities. The Field-TM builds on the HOT Tasking Manager and other mapping applications to provide a more streamlined and organized process for completing mapping tasks.</p> <p>Currently, it is possible to implement a Field Tasking Manager workflow using existing tools, but it requires significant effort and can be challenging.</p> <p>The Field-TM project is developing automation features to address these challenges and make the process more accessible to users.</p> <p>By providing a centralized platform for organizing and managing mapping tasks, assigning them to specific users, and tracking their progress, Field-TM aims to simplify the coordination of mapping activities. The tool also provides analytics and reporting features, allowing users to gain insights into mapping campaigns and adjust their strategies accordingly.</p> <p>Background and description of the project and idea are here: please have a look at this blog if you haven't yet!</p>"},{"location":"about/about/#how-to-contribute","title":"How to contribute","text":"<p>The Field-TM project is open source and community-driven, welcoming contributions from designers, user testers, and both front-end and back-end developers. If you're interested in getting involved, please see our contributor guidelines for more information. We welcome questions and feedback, so don't hesitate to reach out to us. \ud83d\udc4d\ud83c\udf89</p>"},{"location":"about/about/#using-odks-select-from-map-feature","title":"Using ODK's Select From Map feature","text":"<p>ODK's Select From Map feature is a useful tool for field mappers to collect data in a well-structured questionnaire format. The tool was incorporated into ODK in mid-2022 and allows mappers to select an object from a map, view its existing attributes, and fill out a form with new information and attributes.</p> <p>To prepare map files for ODK, inspiration is taken from the HOT Tasking Manager, which allows remote mappers to choose well-defined small \"task\" areas, ensuring full coverage of the project area and no unintended duplication of tasks. For example, a mapper can approach a building, select that building from a map view within ODK on their mobile phone, and add the opening hours, number of floors, construction material, or any number of useful attributes in a well-structured questionnaire format</p> <p>To prepare the appropriate map files for ODK, we are taking our inspiration from the HOT Tasking Manager, which allows remote mappers to choose well-defined small \"task\" areas, ensuring full coverage of the project area and no unintended duplication of tasks.</p>"},{"location":"about/about/#more-info","title":"More Info","text":"<p>For more information about FieldTM, see the FAQ and Timeline.</p>"},{"location":"about/faq/","title":"\u2753 Frequently Asked Questions \u2753","text":""},{"location":"about/faq/#general","title":"General","text":""},{"location":"about/faq/#what-is-the-field-tasking-manager-field-tm","title":"What is the Field Tasking Manager (Field-TM)?","text":"<p>The Field Tasking Manager (Field-TM) is an online platform that allows contributors to participate in mapping projects related to humanitarian and development work.</p>"},{"location":"about/faq/#what-problem-does-it-solve","title":"What problem does it solve?","text":"<p>There are a few great tools for adding tags to OpenStreetMap in the field already. Field-TM is not aiming to compete with these tools, but instead has two goals:</p> <ol> <li> <p>To solve the challenge of effectively coordinating mappers to work together    when mapping an entire area of interest. It can be difficult to subdivide tasks    and know who is working on what tasks.. Field-TM should solve this problem.</p> </li> <li> <p>Allow for coordinated field mapping both inside and outside of OpenStreetMap.    Sometimes OpenStreetMap is not an appropriate target for the collected data,    so a data flow outside of this ecosystem should be possible too.</p> </li> </ol>"},{"location":"about/faq/#what-makes-field-tm-unique-in-this-space","title":"What makes Field-TM unique in this space?","text":"<ul> <li>Fully open-source.</li> <li>Manages both coordination and data collection* in one framework.</li> <li> <p>Roadmapping input from the rich HOTOSM community.</p> <p>Note</p> <p>The data collection* portion is outsourced to the excellent   ecosystem of ODK tools underneath.</p> </li> </ul>"},{"location":"about/faq/#dont-other-tools-do-similar-things","title":"Don't other tools do similar things?","text":"<p>Note</p> <p>The following is the personal opinion from HOT staff members, and provides   some context for the reasoning behind creating the Field-TM.</p> <p>Generic field mapping:</p> <ul> <li>QField: the mobile extension of QGIS, literally a GIS on your phone.   This is an excellent tool for what it does: collecting geometries in the   field, alongside unstructured attributes like any other GIS.   This is in contrast to tools such as ODK or Kobo that mostly   collect structured survey data, by asking the user sets of predefined   questions.</li> </ul> <ul> <li>Fulcrum: proprietary / paid. Appears to be more focused on data collection   in engineering and environmental contexts, mostly for for-profit companies.   We could possibly learn from them, but they are closed-source.</li> </ul> <ul> <li>ArcGIS Field Maps: proprietary / paid, similar applications to Fulcrum,   but not necessarily designed for text/question based surveys.</li> </ul> <p>Field survey-based data collection:</p> <ul> <li>KoboCollect: fork of ODK, same mobile app essentially, but different back end.   Has a slightly complicated relationship with ODK, formerly taking from the   community and not giving back. In our opinion, ODK is more innovative in pushing   field data collection forward. Kobo do provide a free public server backed by the   UN, as a general public good, and is widely adopted as a result.</li> </ul> <ul> <li>Ona: ODK-compatible software that also has a difficult relationship with Kobo.   The history is complex, but at some point Ona had to make their front end   closed-source. They have a lot of open-source components (like their back end)   and have done some great work around data management and analytics, however,   their main objective is not the same as Field-TM: coordinating field mapping.</li> </ul> <ul> <li>ODK: I won't cover much here, as we talk about it a lot elsewhere.   If you are collected mobile survey data then this is a tool at the forefront   of that space. Many other tools replicate what ODK do.</li> </ul> <ul> <li>ArcGIS Survey123: proprietary / paid, more appropriate for our use case   over ArcGIS Field Maps. However, not an option due to it's closed nature.</li> </ul> <ul> <li>CommCare: open-source, developed by Dimagi, and good for collecting survey   data. It does not, however, use the open XForm / XLSForm standards like ODK,   Kobo, and Ona. Very good at collection of \"longitudinal data\" (data over time),   which ODK has only recently began to address with Entities.   However there are two key missing features:   (1) it's not well set up to handle geospatial data. It is possible to collect a   GPS point of users in the field, but not possible to select geometries to map.   (2) it's not configured to coordinate a team of users for field mapping, but more   for individual users to map.   Despite this we will definitely look for opportunities to learn from / collaborate   into the future.</li> </ul> <p>OpenStreetMap tagging:</p> <ul> <li>StreetComplete: a super simple and intuitive mobile app for improving   OpenStreetMap. New features can be mapped, in addition to tags, directly   uploaded to OSM. While Field-TM definitely wants to be used to update   OSM, it's not the only usage mode we need to focus on (often users need   less public data, such as slum mapping or census data). The app is also   very much focused on editing as an individual, and not about coordinated   mapping as a team.</li> </ul> <ul> <li>EveryDoor: another excellent app in the OSM ecosystem, perhaps focused   slightly more at power users. It has many similar great features as   StreetComplete, but also has the same properties that make it not a direct   competitor for Field-TM.</li> </ul> <p>In the long run, these two tools would be excellent candidates for integration at the low level of Field-TM. It is conceivable that a field mapping campaign could possibly use either ODK, StreetComplete, or EveryDoor to do the actual mapping (while Field-TM coordinates).</p> <p>Unmaintained projects:</p> <ul> <li>MapCampaigner: a now dead project. In our opinion, this tool certainly helped   the Monitoring &amp; Evaluation team for field data collection projects, but did not   add anything innovative in terms of user experience for the the field mapper.</li> </ul> <ul> <li> <p>POSM (+ OpenMapKit): a now dead project. However, this was an excellent technical   advancement and concept for the open mapping sector. It was arguably the first   good solution for field mobile data collection (using ODK and other tools   underneath). OpenMapKit was the data collection system, while POSM was the offline   server supporting it in the field. Unfortunately, the architecture around this   was poorly designed, making it difficult to maintain into the future, meaning   the project failed between 2014-2017.</p> <p>Note</p> <p>The gap left by this only started to be filled with the advent of the   'Select From Map' functionality in ODK in 2018 (partly originally written   by Ping @ ODK, with support from HOT and Ramani Huria @ OMDTZ).</p> <p>It is still useful to learn from the legacy of this tool around offline   deployment on a small field-based device (e.g. RaspberryPI), and is   currently in our roadmap to explore this approach further.</p> </li> </ul>"},{"location":"about/faq/#so-why-should-i-use-field-tm-over-these-other-tools","title":"So why should I use Field-TM over these other tools?","text":"<p>You might not need to! It depends if you are simply collecting data in the field as an individual, or are trying to coordinate amongst a team of enumerators.</p> <p>Field-TM does not attempt to compete within the very rich field data collection ecosystem. Instead, it is a higher level tool, aimed at coordination of enumerators using one of these tools.</p>"},{"location":"about/faq/#what-is-the-relationship-between-field-tm-and-kobo","title":"What is the relationship between Field-TM and Kobo?","text":"<ul> <li>Kobo is not an Field-TM competitor, it's an ODK competitor.</li> <li>Field-TM uses ODK underneath for reasons explained above, but due to the popularity   of Kobo, could (and should) probably support the Kobo data collection app going   forward.</li> <li> <p>This does raise challenges, as new features integrated in ODK Collect take approx   6 months to be integrated into KoboCollect.</p> <p>Note</p> <p>The adoption barrier for migrating from KoboCollect to ODK Collect should   be minimal due to KoboCollect essentially being a re-branded version of   ODK.</p> </li> </ul> <ul> <li> <p>Kobo does provide a free data collection server, supported by UN OCHA, meaning   Kobo adoption in developing countries is currently a lot higher.</p> <p>Note</p> <p>HOT also aims to provide am equivalent free ODK data collection server:   https://odk.hotosm.org</p> </li> </ul> <ul> <li>The Kobo backend is currently (2024) a Python application based an old open-source   tool called FormHub. The functionality of Kobo's and ODK's backends has diverged   significantly over time. However, recently ODK have completely overhauled their   backend to a Node server called ODK Central, which is rock-solid and much more   advanced than the competition.</li> <li>The Kobo web-based form builder is still a big differentiator between the tools,   as it is much more user-friendly (less technical) than ODK's requirement to know   XLSForm language. However the capability of the web form builder is much less   sophisticated than directly using XLSForms. It's nevertheless very useful for   beginners.</li> </ul>"},{"location":"about/faq/#info-for-users","title":"Info For Users","text":""},{"location":"about/faq/#do-i-need-to-create-an-account-to-use-the-field-tm-web-app","title":"Do I need to create an account to use the Field-TM Web App?","text":"<p>Mappers have no requirement to sign up, easing the process of mapping for those that are impatient to get started! However, to use the Field-TM project management site it is recommended to sign in with OSM. This is so data uploaded to OSM can be attributed to a user. Notifications are also sent via OpenStreetMap messages/emails.</p>"},{"location":"about/faq/#how-do-i-contribute-to-a-mapping-project-on-the-field-tm-web-app","title":"How do I contribute to a mapping project on the Field-TM Web App?","text":"<p>To contribute to a mapping project on the Field-TM Web App, you can create an account, select a project of interest, and choose a task to work on. You can then use the mapping tools provided to complete the task.</p>"},{"location":"about/faq/#can-i-work-on-multiple-mapping-tasks-at-the-same-time-on-the-field-tm-web-app","title":"Can I work on multiple mapping tasks at the same time on the Field-TM Web App?","text":"<p>Yes, you can work on multiple mapping tasks at the same time on the Field-TM Web App, as long as you can commit the necessary time and effort to each task.</p>"},{"location":"about/faq/#how-do-i-know-if-my-mapping-work-on-the-field-tm-web-app-is-accurate","title":"How do I know if my mapping work on the Field-TM Web App is accurate?","text":"<p>The Field-TM Web App has a validation process where other contributors review and validate the mapping work. This helps to ensure the accuracy of the mapping data.</p>"},{"location":"about/faq/#can-i-provide-feedback-on-a-mapping-project-on-the-field-tm-web-app","title":"Can I provide feedback on a mapping project on the Field-TM Web App?","text":"<p>Yes, you can provide feedback on a mapping project on the Field-TM Web App by leaving a comment on the project page or contacting the project manager.</p>"},{"location":"about/faq/#how-do-i-download-mapping-data-from-a-project-on-the-field-tm-web-app","title":"How do I download mapping data from a project on the Field-TM Web App?","text":"<p>To download mapping data from a project on the Field-TM Web App, you can select the project of interest and click on the \"Export\" button on the project page.</p>"},{"location":"about/faq/#can-i-use-the-mapping-data-from-the-field-tm-web-app-for-my-own-research-or-projects","title":"Can I use the mapping data from the Field-TM Web App for my own research or projects?","text":"<p>The mapping data on the Field-TM Web App is generally open and available for use, but it is important to check the specific project requirements and licenses before using the data for your own research or projects.</p>"},{"location":"about/faq/#what-are-the-benefits-of-contributing-to-the-field-tm","title":"What are the benefits of contributing to the Field-TM?","text":"<p>Contributing to the Field-TM allows you to help with important humanitarian and development work, while also developing your mapping skills and knowledge.</p>"},{"location":"about/faq/#do-i-need-to-have-prior-mapping-experience-to-contribute-to-the-field-tm","title":"Do I need to have prior mapping experience to contribute to the Field-TM?","text":"<p>No, prior mapping experience is not required to contribute to the Field-TM. The platform provides training and resources to help new contributors get started.</p>"},{"location":"about/faq/#can-i-work-on-multiple-mapping-projects-at-the-same-time","title":"Can I work on multiple mapping projects at the same time?","text":"<p>Yes, you can work on multiple mapping projects at the same time. However, it is important to ensure that you can commit the necessary time and effort to each project.</p>"},{"location":"about/faq/#how-do-i-get-feedback-on-my-mapping-work","title":"How do I get feedback on my mapping work?","text":"<p>The Field-TM provides a validation process where other contributors review and provide feedback on mapping work. You can also contact project managers or experienced contributors for additional feedback.</p>"},{"location":"about/faq/#info-for-project-managers","title":"Info For Project Managers","text":""},{"location":"about/faq/#can-i-use-my-own-odk-central-instance","title":"Can I use my own ODK Central instance?","text":"<p>Yes, you can. We understand in many cases users may already have an instance of ODK Central (for example, at at organisational level), so you may use your own server and credentials.</p> <p>Please ensure the user credentials have 'Administrator' level permission, else Field-TM project creation will not work.</p> <p>The credentials should be provided when requesting the creation of an 'Organisation' in Field-TM.</p> <p>Alternatively, you may request credentials for the HOT Global ODK Central Instance.</p>"},{"location":"about/faq/#info-for-repository-contributors","title":"Info For Repository Contributors","text":""},{"location":"about/faq/#how-can-i-become-a-contributor-to-the-field-tm","title":"How can I become a contributor to the Field-TM?","text":"<p>To become a contributor to the Field-TM, you can create an account on Github and contribute to issues, discussions, or pull requests.</p>"},{"location":"about/faq/#who-can-contribute-to-field-tm","title":"Who can contribute to Field-TM?","text":"<p>Anyone can contribute to Field-TM. It is an open-source project, and contributions from developers, designers, and other contributors are always welcome.</p>"},{"location":"about/faq/#what-kind-of-contributions-can-i-make-to-field-tm","title":"What kind of contributions can I make to Field-TM?","text":"<p>There are several ways you can contribute to Field-TM, including:</p> <p>Development: If you have experience in web development, you can contribute by fixing bugs, adding new features, or improving the existing codebase.</p> <p>Design: If you are a designer, you can contribute by improving the user interface, creating new design assets, or providing feedback on the existing design.</p> <p>Documentation: If you have experience in technical writing, you can contribute by writing documentation, tutorials, or other educational materials.</p> <p>Testing: If you have experience in software testing, you can contribute by testing the application and reporting bugs or suggesting improvements.</p> <p>Translation: If you are fluent in a language other than English, you can contribute by translating the application or its documentation into your language.</p>"},{"location":"about/faq/#what-technologies-are-used-in-field-tm","title":"What technologies are used in Field-TM?","text":"<p>Field-TM is built using several technologies, including FastAPI, Postgres, React, Svelte, and web components. The codebase is written in Python &amp; TypeScript mostly.</p>"},{"location":"about/faq/#how-do-i-set-up-field-tm-locally","title":"How do I set up Field-TM locally?","text":"<p>To set up Field-TM locally, the simplest approach is likely using Docker. If you are an advanced user, it is possible to run each service individually too. Please follow the instructions in the setup guide on this site.</p>"},{"location":"about/faq/#help-cloning-the-repo-doesnt-work-for-me","title":"Help! Cloning the repo doesn't work for me","text":"<p>If you are receiving errors cloning the repo, it may be an unstable internet connection causing issues.</p> <p>First, please check your internet connection, or use another connection if possible.</p> <p>One option to reduce the amount of content that needs to be downloaded is to do a shallow clone:</p> <pre><code>```bash\n# Shallow clone only the `dev` branch\ngit clone --depth 1 --no-single-branch https://github.com/hotosm/field-tm.git\n```\n</code></pre> <p>To pull additional branches as you need them (for example, to work on them):</p> <pre><code>```bash\ngit fetch origin branch-name\ngit checkout branch-name\n```\n</code></pre> <p>As an absolute last resort, you could try the following:</p> <pre><code>```bash\n# Set HTTP version to 1.1 for stability (multiple connections vs multiplexing)\ngit config --global http.version HTTP/1.1\n\n# Increase timeout to 3 minutes\ngit config --global http.lowSpeedTime 180\n\n# Allow retries in case of failure\ngit config --global http.retry 3\n\n# Disable integrity checks for easier resume\ngit config --global fetch.fsckObjects false\ngit config --global fetch.writeCommitGraph false\n\n# Your clone command here...\n```\n</code></pre>"},{"location":"about/faq/#how-can-i-report-a-bug-or-suggest-a-new-feature-for-field-tm","title":"How can I report a bug or suggest a new feature for Field-TM?","text":"<p>You can report bugs or suggest new features by opening an issue on the Field-TM repository on GitHub. Be sure to provide as much detail as possible, including steps to reproduce the bug, screenshots, or mockups for new features.</p>"},{"location":"about/faq/#how-can-i-contribute-to-field-tm-if-im-new-to-open-source-or-web-development","title":"How can I contribute to Field-TM if I'm new to open source or web development?","text":"<p>Field-TM welcomes contributions from developers of all levels of experience, including those who are new to open source or web development. You can start by exploring the project's codebase and documentation, asking questions in the community, and contributing to issues labeled as \"good first issue.\" Additionally, you can join the Field-TM community on Slack to connect with other contributors and get help with your contributions.</p>"},{"location":"about/faq/#advanced-use-cases","title":"Advanced Use Cases","text":""},{"location":"about/faq/#how-can-i-work-with-an-offline-basemap","title":"How can I work with an offline basemap?","text":"<ul> <li>Download MBTiles from Field-TM.</li> <li>Load MBTiles into ODK Collect via   this guide</li> </ul>"},{"location":"about/faq/#can-i-edit-my-xlsform-after-i-create-a-project","title":"Can I edit my XLSForm after I create a project?","text":"<ul> <li>XLSForms can be updated!</li> <li>Go to the 'Manage Project' section.</li> <li>Edit --&gt; Form Update.</li> <li>You can download the existing form from here.</li> <li>Edit the form, then upload and click the 'Update' button.</li> <li>This will update the form in ODK also.</li> </ul>"},{"location":"about/faq/#can-i-record-features-that-dont-exist-on-the-map-yet","title":"Can I record features that don't exist on the map yet?","text":"<p>Yes!</p> <ul> <li>Click on a task area.</li> <li>Then click to 'Add new feature'.</li> <li>This will open the Form to collect data.</li> <li>One of the form questions will ask you to record a geopoint of the   feature location.</li> </ul>"},{"location":"about/faq/#can-i-lock-multiple-tasks-as-once-for-mapping-or-validation","title":"Can I lock multiple tasks as once for mapping or validation?","text":"<p>Yes!</p> <ul> <li>There should be no issue doing this.</li> <li>However, note that if there is no activity on a locked task   after a period of time, the task may auto-unlock, allowing   other mappers to lock and contribute.</li> </ul>"},{"location":"about/faq/#what-is-the-custom-odk-collect-app","title":"What is the custom ODK Collect app?","text":"<ul> <li>ODK Collect is an excellent mobile application.</li> <li>We need a slightly modified functionality of the app, so have created   a custom version for you to use with Field-TM.</li> <li>We maintain a good relationship with the ODK developers and would like   to get this functionality into the map app (meaning no custom app is required).</li> <li>However, this will take time!</li> </ul>"},{"location":"about/faq/#why-do-i-need-the-custom-odk-collect-app","title":"Why do I need the custom ODK Collect app?","text":"<ul> <li>Ideally when we open ODK Collect, we want our feature / building to be   selected already, avoiding the need to open the map and select it manually.</li> <li>We created the custom ODK Collect for exactly this purpose!</li> <li>It also opens the possibility of more advanced map capabilities in Field-TM,   such as navigation to your chosen feature and directions.</li> <li>Hopefully it provides a more seamless user experience of Field-TM, that we   can't provide with the default Collect.</li> </ul>"},{"location":"about/faq/#how-do-i-install-the-custom-odk-collect-app","title":"How do I install the custom ODK Collect app?","text":"<ul> <li>First, open the sidebar on Field-TM and click the button to download the   custom ODK Collect <code>.apk</code> file.</li> <li>If you don't have ODK Collect installed already, then you should be able to   click this file and install as normal.</li> <li>If you already have ODK Collect installed, then you may have to uninstall   this version first, prior to installing the custom version. This is to avoid   version conflicts.</li> </ul>"},{"location":"about/team/","title":"The Team","text":"The Field-TM Team <p>Field-TM is developed as a collaboration between HOT's Tech Team &amp; NAXA</p> <p>The key staff working on Field-TM are listed below.</p> Ramya Product Owner and general product vision Manjita Pandey Product Manager and development coordination Sam Tech Lead for the development team Nishit Suwal Primary frontend developer Anuj Gupta Primary backend developer Sujan Basnet Support backend developer Susmina Manandhar Product Manager advisory role Niraj Adhikari Backend development advisory role Deepak Pradhan (Varun) Frontend development advisory role Sujan Adhikari Primary backend developer 2023-2025 <p>To see a list of all our contributors and their roles, please see our contributors list in the README.md file.</p>"},{"location":"decisions/","title":"Architectural Decisions","text":"<p>Markdown Architectural Decision Records documenting the technical decisions taken in this project.</p> <p>This process was started 29/10/2024, so does not necessarily capture all decisions from the projects inception.</p>"},{"location":"decisions/#decisions","title":"Decisions","text":"<ul> <li>0000 - HOTOSM Context and Alignment</li> <li>0001 - FastAPI for Backend API</li> <li>0002 - ODK For Survey Data</li> <li>0003 - Use of FlatGeobuf for Frontend Geospatial Data</li> <li>0004 - ODK Web Forms To Replace ODK Collect</li> <li>0005 - UI Translation Strategy</li> <li>0006 - Web Application Firewall (Security)</li> <li>0007 - Separate Manager / Mapper Frontends</li> <li>0008 - Sync Layer with ElectricSQL</li> <li>0009 - Custom Webhook from ODK Central</li> </ul>"},{"location":"decisions/0000-hotosm/","title":"Higher Level HOTOSM Decisions","text":"<p>Many decisions have been made at an organizational level, affecting all tools that we develop.</p> <p>The decisions made in this project should not deviate much from the choices, starting here.</p>"},{"location":"decisions/0001-fastapi/","title":"Use FastAPI as Python web API framework","text":""},{"location":"decisions/0001-fastapi/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>We need to serve content from a backend linked to a database, to the frontend for display.</p> <p>Historically Django (DRF) and Flask were best. Since <code>asgi</code> had more adoption, async frameworks are key.</p> <p>FastAPI was the first to market to combine many powerful features:</p> <ul> <li>ASGI Starlette + Uvicorn server.</li> <li>Pydantic validation.</li> <li>OpenAPI spec parsing.</li> </ul> <p>Alternatives page in FastAPI docs.</p>"},{"location":"decisions/0001-fastapi/#considered-options","title":"Considered Options","text":"<ul> <li>Django Rest Framework</li> <li>Flask</li> <li>FastAPI</li> </ul>"},{"location":"decisions/0001-fastapi/#decision-outcome","title":"Decision Outcome","text":"<p>We chose FastAPI in 2022 is it was a well adopted, with a large community, and has great developer experience. It's also quite performant.</p>"},{"location":"decisions/0001-fastapi/#consequences","title":"Consequences","text":"<ul> <li>Good, because code is much more concise and understandable.</li> <li>Good, because endpoints are auto-documented as OpenAPI.</li> <li>Bad, because as with any decision at this level, migration away becomes difficult   (would require a rewrite using another framework).</li> </ul>"},{"location":"decisions/0002-odk/","title":"Use ODK as the underlying survey data collection tool","text":""},{"location":"decisions/0002-odk/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>Field-TM requires the collection of structured data from users in the field, using mobile phone-based data forms.</p> <p>To save re-inventing the wheel, many other organizations have addressed this common requirement, so we should incorporate their tooling into Field-TM.</p>"},{"location":"decisions/0002-odk/#considered-options","title":"Considered Options","text":"<ul> <li>Kobo</li> <li>ODK</li> <li>Ona.io</li> <li>Dimagi CommCare</li> </ul>"},{"location":"decisions/0002-odk/#decision-outcome","title":"Decision Outcome","text":"<p>We chose ODK for two main reasons:</p> <ul> <li>HOT staff have used ODK successfully for many field data collection campaigns   in the past, and can attest to it's suitableness.</li> <li>ODK appears to be at the forefront of this technology, for both product   stability, and new feature innovation. Others mimic the same technology,   building wrappers around ODK's tools.</li> </ul>"},{"location":"decisions/0002-odk/#consequences","title":"Consequences","text":"<ul> <li>Good, because we do not need to implement the form creation logic.</li> <li>Good, because ODK uses simple technologies accessible to most users,   such as XLSX spreadsheets to build forms.</li> <li>Good, because we do not need to implement the field data collection   tool. Instead we need to develop the coordination layer above.</li> <li>Good, because ODK is extremely robust and battle tested. We can rely on it.</li> <li>Bad, we now have two tools and two databases to manage.</li> <li>Bad, it adds additional constraints to development, having to   manage data flows in both Field-TM and ODK (for example, as local-first   approach to development becomes significantly harder).</li> </ul>"},{"location":"decisions/0003-flatgeobuf/","title":"Data extract files should be in flatgeobuf format","text":""},{"location":"decisions/0003-flatgeobuf/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>When creating an Field-TM project, we need a set of geometries to map. This has typically been called the 'data extract'.</p> <p>Either the user can upload their own geometries in GeoJSON format, or download geometries from OSM via a call to raw-data-api.</p> <p>The resulting data should be easily accessible on the backend for creation of a matching ODK Entities Dataset (used for the geometry selection in ODK), but also on the frontend for easy visualisation (ideally without an API call).</p> <p>A cloud-native format is most appropriate here, to reduce calls to the API, and outsource to object storage like S3.</p>"},{"location":"decisions/0003-flatgeobuf/#considered-options","title":"Considered Options","text":"<ul> <li>GeoJSON</li> <li>Flatgeobuf</li> <li>Geoparquet</li> <li>PMTiles (or other vector tiles)</li> </ul>"},{"location":"decisions/0003-flatgeobuf/#decision-outcome","title":"Decision Outcome","text":"<p>https://github.com/hotosm/field-tm/pull/1047</p> <p>At the time of implementation (Dec 2023), <code>flatgeobuf</code> was selected as the best candidate. The frontend JS implementation is excellent.</p> <ul> <li>GeoJSON is not cloud native / BBOX accessible via a HTTP RANGE request.</li> <li>GeoParquet support on the frontend was lacking.</li> <li>PMTile usage was still quite nascent. Since then this has been identified   as another possible solution. However, creation would require additional libs   to be bundled in Field-TM, and vector tile styling can be a pain.</li> </ul> <p>Flatgeobuf seems to be most applicable for this use case (a small amount of data).</p>"},{"location":"decisions/0003-flatgeobuf/#consequences","title":"Consequences","text":"<ul> <li>Good, because it's a simple format with excellent support in GIS tools (OGR).</li> <li>Good, no styling is required. It can be determined by the web library / renderer.</li> <li>Good, has built in geospatial index and accepts BBOX-based HTTP RANGE requests.</li> <li>Bad, because flatgeobuf does not support compression, so files are marginally   larger.</li> </ul>"},{"location":"decisions/0004-web-forms/","title":"Implement ODK Web Forms to phase out ODK Collect","text":""},{"location":"decisions/0004-web-forms/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>ODK Collect is the mobile survey data collection portion of ODK.</p> <p>It currently only supports Android.</p> <p>In Field-TM, the mapper is required to swap back-and-forth between the Field-TM and ODK Collect applications, which is not an ideal experience.</p> <p>Users on iOS also wish to use the Field-TM.</p>"},{"location":"decisions/0004-web-forms/#considered-options","title":"Considered Options","text":"<ul> <li>ODK Collect only</li> <li>ODK Collect + GIC Collect (unofficial iOS port)</li> <li>ODK Web Forms</li> <li>Custom web implementation in Field-TM</li> </ul>"},{"location":"decisions/0004-web-forms/#decision-outcome","title":"Decision Outcome","text":"<p>Between 01-2025 and 05-2025, ODK Web forms will be integrated into Field-TM.</p> <p>Again, we can extend from the excellent work done by ODK on the core xform-engine logic, then either use their Vue based component implementation in a Web Component wrapper, or write our own components wrapping this logic.</p> <p>GIC Collect is closed source and updated infrequently, so not an option.</p>"},{"location":"decisions/0004-web-forms/#consequences","title":"Consequences","text":"<ul> <li>Good, because we have to maintain less code ourselves.</li> <li>Good, because it broadens the potential user base of Field-TM.</li> <li>Good, because it simplifies the tech stack for Field-TM, with no interfacing   to an Android application via deep linking / intents required.</li> <li>Bad, because it's a risk with Web Forms being such a new project.</li> <li>Bad, because it means we are entirely web-based. This has pros and cons,   but we do lose the benefit of very easy offline submission management   in ODK Collect (everything required is simply bundled in the app, with   no web dependencies). We are banking on good caching, intermittent   connectivity, and a sync layer to facilitate offline-first.</li> </ul>"},{"location":"decisions/0005-translations/","title":"Use ParaglideJS for frontend internationalisation (translations)","text":""},{"location":"decisions/0005-translations/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>We need to serve Field-TM in many languages, not just English, as mappers are global.</p> <p>Ideally these translations are contributed by the community and not just the HOT team.</p> <p>We will likely ask the community to contribute translations via Weblate, or another similar tool.</p> <p>We will not consider closed-source / paid tools for this, such as:</p> <ul> <li>Transifex</li> <li>Tolgee (although this looks good!)</li> <li>Crowdin</li> </ul>"},{"location":"decisions/0005-translations/#considered-options","title":"Considered Options","text":"<ul> <li>Any library that is framework specific, such as react-i18next,   react-intl, or svelte-i18n. These won't be used to avoid lock-in and   to aid transfer of translations across projects.</li> <li>i18next is one of the most prominent, but other tools have   since superseded this in terms of usability and performance.</li> <li>lingui looks like an excellent choice, with many nice features   such as being platform agnostic, good community, and semantic key   translations (meaning the actual english text to be translated   is present in the code, instead of a key like home.banner.hello).</li> <li>ParaglideJS is the newest here, with most of the same advantages of   lingui, including a few extra such as code splitting / tree shaking.</li> </ul>"},{"location":"decisions/0005-translations/#decision-outcome","title":"Decision Outcome","text":"<p>We chose ParaglideJS for two primary reasons:</p> <ul> <li>Support for tree shaking of translations. Typically the translations   for an app are all loaded into the frontend as a large bundle. Paraglide   works differently, in that the frontend only receives the translations   that are used on the current page (i.e. are split per component / page).   This uses advantages provided by the bundler (e.g. Vite) to significantly   reduce bundle size! It's truly a next generation i18n solution that will   no doubt be copied by others.</li> </ul> <ul> <li>Some other nice features in the tool ecosystem, such as the 'fink'   translation editor. This is an interactive GUI for less technical users   to edit the translations, then push them to Github (without needing to   understand Git and make changes in the code / files directly).</li> </ul>"},{"location":"decisions/0005-translations/#consequences","title":"Consequences","text":"<ul> <li>Good, because it's the most performant of all the solutions.</li> <li>Good, because the DevEx is excellent, being very easy to integrate.</li> <li>Good, because the files are simple JSON that is easy to edit.</li> <li>Good, because supports any web framework through <code>paraglide-js</code> package.</li> <li>Good, because there is already a nice wrapper available for simpler   use with Svelte, so we can get integrating into the mapper frontend easily.</li> <li>Good, because non-developers can easily use Fink UI to edit translations.</li> <li>Bad, because it's the newest tool here and does not have   significant testing across many production apps.</li> <li>Bad, because it doesn't integrate easily with crowdsource translation   apps such as Weblate, due to lack of an interchange format like   gettext PO or XLIFF. This may change in future.</li> </ul>"},{"location":"decisions/0006-web-app-firewall/","title":"Use BunkerWeb as a Web Application Firewall","text":""},{"location":"decisions/0006-web-app-firewall/#context-and-problem-statement","title":"Context and Problem Statement","text":"<ul> <li>We can use a vanilla web server like Nginx or Apache.</li> <li>However, Web Application Firewall (WAF) solutions contain many additional   security features.</li> <li>They require less configuration than setting this up and maintaining it   ourselves, so make sense to leverage for better general security.</li> <li>We can have built in Brotli compression, DDOS protection, modsecurity rules,   'bad behaviour' and bot blocking all included.</li> </ul>"},{"location":"decisions/0006-web-app-firewall/#considered-options","title":"Considered Options","text":"<ul> <li>Vanilla Nginx + ModSecurity rules</li> <li>Safeline</li> <li>BunkerWeb</li> <li>openappsec</li> <li>OWASP Coraza</li> </ul>"},{"location":"decisions/0006-web-app-firewall/#decision-outcome","title":"Decision Outcome","text":"<ul> <li>Vanilla ModSecurity is to much maintenance hassle.</li> <li>Safeline is paid for most of the good features (freemium).</li> <li>openappsec isn't well supported and we have uncertainties around the   ML-based approach used here (an precedence for prod use?)</li> <li>OWASP Coraza is no doubt fantastic - officially supported by OWASP -   but the issue is integration into our app. There is no clear pathway   yet outside of integrating into a Golang app. Integrating into Caddy   is possible, but Nginx is likely better.</li> </ul> <p>We chose BunkerWeb as it integrates OWASP ModSecurity rulesets, is based on standard Nginx, and is quite configurable. The code is also fully open-source and community driven. It seems like a safe bet.</p>"},{"location":"decisions/0006-web-app-firewall/#consequences","title":"Consequences","text":"<ul> <li>Good, because it's based on Nginx upstream code.</li> <li>Good, because it integrates OWASP best practice ModSecurity rules.</li> <li>Good, because it's easy to replace our existing Nginx setup.</li> <li>Bad, because it's not an officially supported OWASP project.</li> <li>Good, the model is a generous freemium one, that could change in future   (the code is all open, however).</li> <li>Good, because migration away should be relatively easy if needed.</li> <li>Good, because OpenAppSec may be integrated in future:   https://github.com/bunkerity/bunkerweb/issues/819</li> <li>Bad, because we don't have great benchmark comparisons (but it's   based on Nginx, so shouldn't be an issue).</li> <li>Bad, because we don't have good clarity on it's usage in production   in the wild.</li> </ul>"},{"location":"decisions/0007-separate-frontends/","title":"Separate frontends for management and mapper experience","text":""},{"location":"decisions/0007-separate-frontends/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>Initially, FieldTM was implemented as a single backend and frontend application, serving both managers and mappers through a unified interface.</p> <p>It became quickly apparent that the needs of our two main user groups\u2014project managers and field mappers\u2014are significantly different in terms of both UX and technical constraints.</p>"},{"location":"decisions/0007-separate-frontends/#mapper-needs","title":"Mapper needs","text":"<ul> <li>Mobile-first experience, operated almost exclusively via smartphones.</li> <li>Minimal bundle size to accommodate poor network conditions.</li> <li>Potential for offline support in the future.</li> <li>Focused interaction model: completing mapping tasks efficiently.</li> <li>Possibility to use more experiment libraries, such as real-time   syncing. See the sync layer decision.</li> </ul>"},{"location":"decisions/0007-separate-frontends/#manager-needs","title":"Manager needs","text":"<ul> <li>Desktop-first experience, often operated in office or home environments.</li> <li>Rich UI with dashboards, task assignment tools, and data overviews.</li> <li>Bundle size and performance are less critical.</li> <li>No need for offline support.</li> <li>More complex workflows, often administrative or supervisory in nature.</li> </ul>"},{"location":"decisions/0007-separate-frontends/#considered-options","title":"Considered Options","text":"<ul> <li>Single React frontend for all users   Pros: Single codebase to maintain; shared UI components and libraries.   Cons: Difficult to optimize simultaneously for mobile and desktop users;   risks bloated bundle size and UX compromises for both groups.</li> </ul> <ul> <li>Separate frontends (both in React)   Pros: Clear UX separation, better scoped apps.   Cons: Still carries React's weight for both; redundant logic and tooling.</li> </ul> <ul> <li>Separate frontends with different frameworks   Pros: Allows for framework choice optimized for each use case.   Cons: Increases stack complexity, requires team familiarity with   multiple frameworks.</li> </ul> <ul> <li>HTMX (or other server-rendered static site) for manager; reactive frontend   for mapper   Pros: Extremely maintainable for admin interfaces; ideal if React was   not already in use.   Cons: Costly rewrite; limited interactivity for complex workflows.</li> </ul>"},{"location":"decisions/0007-separate-frontends/#decision-outcome","title":"Decision Outcome","text":"<p>We chose to build two separate frontends using different frameworks:</p> <ul> <li>Mapper frontend: Built in Svelte, focusing on a small footprint,   fast load times, and mobile responsiveness. Svelte\u2019s compilation model   avoids shipping a large runtime and allows for highly performant UI in   resource-constrained environments.</li> </ul> <ul> <li>Manager frontend: Remains in React, which is familiar to the team and already   well-established in the project. Although heavier, React\u2019s mature ecosystem and   component libraries are better suited for building complex administrative dashboards.</li> </ul> <p>This diverges from a previous decision to standardize on React, but was necessary to meet the distinct performance and UX goals for the mapper experience.</p> <p>We briefly considered switching the manager frontend to HTMX for improved long-term maintainability, but the rewrite cost was prohibitive. This discussion is ongoing and may be revisited.</p>"},{"location":"decisions/0007-separate-frontends/#consequences","title":"Consequences","text":"<ul> <li>\u2705 Improved user experience for both mappers and managers, by tailoring each interface   to its specific audience and device.</li> <li>\u2705 Significantly smaller bundle size and faster performance for the mapper frontend,   critical for low-bandwidth field environments.</li> <li>\u2705 Faster iteration and simpler mental model for mobile app development,   due to Svelte\u2019s more concise syntax and simpler state handling.</li> <li>\u2705 Preservation of existing investment in the manager React codebase,   avoiding unnecessary rewrites.</li> <li>\u274c Increased maintenance overhead due to multiple frameworks, requiring the   team to context-switch between Svelte and React.</li> <li>\u274c Shared logic (e.g., form rendering, API clients) must be abstracted into   framework-agnostic libraries or duplicated, increasing effort.</li> <li>\u274c Departure from React-only policy creates inconsistency in the stack and could   complicate onboarding or developer allocation.</li> <li>\u274c Future changes to the manager interface may require difficult tradeoffs if we   eventually want to transition to something like HTMX or unify frontends.</li> </ul>"},{"location":"decisions/0008-sync-layer/","title":"Use Electric-SQL as a sync layer on mapper-frontend","text":""},{"location":"decisions/0008-sync-layer/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>We are transitioning the mapper frontend in FieldTM to a local-first application state model, where data is stored and queried locally (in the browser) and synchronized with a remote server in the background.</p> <p>This shift supports:</p> <ul> <li>Offline use: Field mappers often operate in remote areas with unreliable   or no connectivity.</li> <li>Responsiveness: Local queries and updates are significantly faster,   improving the user experience.</li> <li>Resilience: Use of modern mechanisms such as CRDTs to resolve conflicts   in data capture.</li> </ul> <p>We needed a solution to synchronize a PostgreSQL-based backend with a local client-side database that integrates smoothly into our stack.</p>"},{"location":"decisions/0008-sync-layer/#considered-options","title":"Considered Options","text":"<ul> <li>ElectricSQL<ul> <li>Syncs a remote PostgreSQL instance with a local embedded Postgres (pglite)   in the browser.</li> <li>Offers a strong local-first story, full SQL support, and CRDT-based   conflict resolution.</li> <li>Developed using Elixir, a language very well optimised for concurrent   user patterns and   real-time web capabilities.</li> <li>Also uses standard HTTP instead of Web Sockets, to fully utilise existing   infrastructure such as proxy caching and load balancing systems.</li> </ul> </li> </ul> <ul> <li>Replicache<ul> <li>Uses a custom sync engine and local IndexedDB storage. Well-designed for   reactivity and performance.</li> <li>Not SQL-based\u2014requires writing a custom sync protocol and a client-side   data model.</li> </ul> </li> </ul> <ul> <li>PowerSync<ul> <li>Syncs PostgreSQL to SQLite via a WebSocket-based protocol.</li> <li>Lightweight and performant, syncing to SQLite in-browser.</li> <li>Recently open-sourced their sync layer to self-host.</li> <li>Uses MongoDB underneath, which we do not use anywhere at HOT currently   (we are migrating the usage in OAM to Postgres, due to issues in the   legacy system). Written in JS.</li> </ul> </li> </ul> <ul> <li>Custom sync layer<ul> <li>Building our own logic on top of IndexedDB or WebStorage with a REST or   WebSocket backend.</li> <li>High flexibility, but requires significant engineering effort to match the   robustness of existing tools.</li> </ul> </li> </ul>"},{"location":"decisions/0008-sync-layer/#decision-outcome","title":"Decision Outcome","text":"<p>We chose ElectricSQL as the sync layer for our mapper frontend.</p> <p>This decision was driven by ElectricSQL's alignment with our technical goals:</p> <ul> <li>Direct support for PostgreSQL as both the remote and local data model,   reducing impedance mismatch.</li> <li>Ability to run Postgres locally in the browser using pglite, preserving SQL   semantics and familiar tooling.</li> <li>Also has support for many existing extensions, with potential for PostGIS in   thee future too.</li> <li>Built-in CRDT-based conflict resolution, which simplifies eventual consistency   handling.</li> <li>Seamless support for offline-first patterns and live reactivity through sync   subscriptions.</li> <li>Fast-growing open source community and active development. A very strong   development team behind it (including researchers behind CRDTs).</li> <li>While still an emerging tool, ElectricSQL provides the best combination   of developer ergonomics, architecture fit, and user experience for our   specific needs.</li> </ul>"},{"location":"decisions/0008-sync-layer/#consequences","title":"Consequences","text":"<ul> <li>\u2705 Improved offline support for mappers, with full CRUD capabilities and   seamless sync once back online.</li> <li>\u2705 Consistent data model across backend and frontend using SQL, avoiding   custom client-side stores or abstractions.</li> <li>Sharing database init and migration scripts between backend and frontend.</li> <li>\u2705 Developer familiarity with Postgres tooling and schema migrations,   even on the frontend.</li> <li>\u2705 Real-time sync makes the mapper UI more reactive and engaging.</li> <li>\u274c Increased bundle size and complexity due to running a Postgres-compatible   engine in the browser.</li> <li>\u274c Limited ecosystem maturity compared to more established tools like   Replicache or Firebase.</li> <li>\u274c Learning curve for the Electric-specific tooling, sync setup, and   reactive patterns.</li> <li>\u274c Not yet battle-tested at massive scale, which could impact confidence   in long-term durability.</li> </ul>"},{"location":"decisions/0009-central-webhook/","title":"Use a custom webhook to Sync ODK Central submissions to FieldTM","text":""},{"location":"decisions/0009-central-webhook/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>We use ODK Central for form delivery and mobile data collection (via ODK Collect), but our main system (FieldTM) runs a separate Postgres database and does not share state with ODK Central. In FieldTM, we store a subset of ODK submission data in order to drive dashboards, analytics, task assignments, and reactive sync through ElectricSQL.</p> <ul> <li>ODK Central does not currently offer native webhook support, so there's no   built-in way to push events (like new submissions) to an external system such as   FieldTM.</li> <li>All current data sharing methods from ODK Central (OData, JSON/CSV APIs, XML downloads)   are pull-based and require regular polling, which introduces latency and resource   overhead.</li> </ul> <ul> <li>We needed a push-based solution to keep FieldTM in sync with new ODK submissions   in near real-time, without relying on polling or shared databases.</li> </ul>"},{"location":"decisions/0009-central-webhook/#decision-drivers","title":"Decision Drivers","text":"<ul> <li>Need for real-time or near-real-time sync from ODK Central to FieldTM.</li> <li>Avoiding tight coupling to ODK Central\u2019s internal Postgres schema.</li> <li>Preserving the ability to integrate with organization-wide ODK Central instances,   not just self-hosted ones.</li> <li>Future compatibility with other platforms (e.g. Kobo, ona.io) that follow   ODK standards.</li> <li>Supporting local-first and reactive UI through ElectricSQL syncing to a local   pglite (Postgres in browser) instance.</li> </ul>"},{"location":"decisions/0009-central-webhook/#considered-options","title":"Considered Options","text":"<ol> <li> <p>Polling Central API</p> <ul> <li>Pros: Supported today; no custom development needed.</li> <li>Cons: Inefficient, introduces latency, doesn\u2019t scale well for    real-time updates.</li> </ul> </li> <li> <p>Direct database access</p> <ul> <li>Pros: Real-time access; no API limitations.</li> <li>Cons: Requires FieldTM and Central to be co-deployed; tightly couples    services and prevents usage with remote/shared instances.</li> </ul> </li> <li> <p>Existing middleware/integration tools (e.g. OpenHIM, Zapier, Activepieces)</p> <ul> <li>Pros: Off-the-shelf options; little code.</li> <li>Cons: Complex setup or limited flexibility; often still require polling;    not a good fit for our lightweight infra.</li> </ul> </li> <li> <p>Custom webhook service using ODK audit logs (chosen)</p> <ul> <li>Pros: Fully decoupled; real-time-ish with small footprint; extendable.</li> <li>Cons: Requires ongoing maintenance; relies on parsing Central    audit logs (not officially a webhook API).</li> </ul> </li> </ol>"},{"location":"decisions/0009-central-webhook/#decision-outcome","title":"Decision Outcome","text":"<p>We built central-webhook, a custom lightweight service in Go.</p> <p>It runs alongside ODK Central and listens for audit events in the database, using Postgres triggers and NOTIFY to emit changes to an external webhook endpoint hosted by FieldTM.</p>"},{"location":"decisions/0009-central-webhook/#consequences","title":"Consequences","text":"<ul> <li>\u2705 Push-based updates enable timely sync into FieldTM without polling.</li> <li>\u2705 Compatible with ElectricSQL, letting us stream changes to the frontend instantly.</li> <li>\u2705 Works with any Central instance, even if hosted by another team or organization.</li> <li>\u2705 Open to supporting other ODK-compatible platforms in the future (e.g. Kobo, Ona).</li> <li>\u2705 Very lightweight and stateless, written in Go and deployable via a small container.</li> <li>\u2705 No dependence on Central internals beyond the audit log, avoiding tight coupling.</li> <li>\u274c Adds one more moving piece to deploy and monitor.</li> <li>\u274c Audit logs were probably not designed for this purpose, but work well for our   needs.</li> </ul> <p>Future Considerations</p> <ul> <li>The webhook system may become redundant if we migrate to ODK Web Forms and   fully integrate form entry directly into FieldTM, bypassing the need for ODK Collect   and external syncing.</li> <li>If ODK Central eventually implements native webhooks, we may retire our custom   implementation or migrate to the official mechanism if it provides the same flexibility.</li> <li>The audit-log parsing strategy is based on a non-public contract, so any major   changes in Central\u2019s audit structure may require updates to our webhook.</li> </ul>"},{"location":"dev/Backend/","title":"Backend Deployment for Development","text":"<p>The recommended way to run Field-TM is with Docker.</p> <p>You can also develop on your local machine outside of Docker, see below.</p> <p>NOTE: If you haven't yet downloaded the Repository and setup your local environment, please check the docs here.</p> <p>Now let's get started </p>"},{"location":"dev/Backend/#1-start-the-api-with-docker","title":"1. Start the API with Docker","text":"<p>The easiest way to get up and running is by using the Field-TM Docker deployment. Docker creates a virtual environment, isolated from your computer's environment, installs all necessary dependencies, and creates a container for each the database, the api, and the frontend. These containers talk to each other via the URLs defined in the docker-compose file and your env file.</p> <ol> <li>You will need to    Install Docker    and ensure that it is running on your local machine.</li> <li>From the command line: navigate to the top level directory    of the Field-TM project.</li> <li>From the command line run: <code>docker compose pull</code>.    This will pull the latest container builds from main branch.</li> <li>Make sure you have a <code>.env</code> file with all required variables, see    here.</li> <li>Once everything is pulled, from the command line run:    <code>docker compose up -d api</code></li> <li>If everything goes well you should now be able to    navigate to the project in your browser: <code>http://api.fmtm.localhost:7050/docs</code></li> </ol> <p>Note: If that link doesn't work, check the logs with <code>docker compose logs api</code>. Note: the database host <code>fmtm-db</code> is automatically resolved by docker compose to the database container IP.</p>"},{"location":"dev/Backend/#bundled-odk-central","title":"Bundled ODK Central","text":"<ul> <li>Field-TM uses ODK Central to store ODK data.</li> <li>To facilitate faster development, the Docker setup includes a Central server.</li> <li>The credentials are provided via the <code>.env</code> file, and the default URL to   access Central from within containers is: <code>http://central:8383</code>.</li> </ul> <p>Alternatively, you may provide credentials to an external Central server in the <code>.env</code>.</p> <p>To run the local development setup without ODK Central (use external server):</p> <pre><code>dc --profile no-odk up -d\n\n# Or via Just\njust start without-central\n</code></pre>"},{"location":"dev/Backend/#2-start-the-api-without-docker","title":"2. Start the API without Docker","text":"<ul> <li>To run Field-TM without Docker, you will need to start the database, then the API.</li> <li>First start a Postgres database running on a port on your machine.<ul> <li>The database must have the Postgis extension installed.</li> </ul> </li> <li>After starting the database, from the command line:</li> </ul> <ol> <li>Navigate to the backend directory under <code>src/backend</code>.</li> <li>Install <code>uv</code> via the official docs</li> <li>Install backend dependencies with <code>uv</code>: <code>uv sync</code></li> <li>Run the Fast API backend with:    <code>uv run uvicorn app.main:api --host 0.0.0.0 --port 8000</code></li> </ol> <p>The API should now be accessible at: http://api.fmtm.localhost:7050/docs</p>"},{"location":"dev/Backend/#backend-tips","title":"Backend Tips","text":""},{"location":"dev/Backend/#database-migration","title":"Database Migration","text":""},{"location":"dev/Backend/#creating-migration-files","title":"Creating Migration Files","text":"<ul> <li>Migrations can be written to <code>src/migrations</code>.</li> <li>Each file must be an SQL script that is:<ul> <li>Idempotent: can be run multiple times without consequence.</li> <li>Atomic: Run within a BEGIN/COMMIT transaction.</li> </ul> </li> <li>Migrations must also include an equivalent revert migration under:   <code>src/migrations/revert</code></li> </ul>"},{"location":"dev/Backend/#applying-migrations","title":"Applying Migrations","text":"<ul> <li>Should occur automatically as part of the docker   compose stack (migration service).</li> <li>To run manually:</li> </ul> <pre><code>docker compose up -d migrations\n\n# Or via Just\njust migrate\n</code></pre>"},{"location":"dev/Backend/#the-task-scheduler","title":"The Task Scheduler","text":"<ul> <li>The backend runs a lightweight scheduling service via cron.</li> <li>The scripts called and intervals can be found in the <code>compose.yaml</code>   scheduler service.</li> <li>As of 21th April 2025, we run:</li> </ul> <pre><code># Task unlocking every 3hrs\n* */3 * * * /opt/scheduler/unlock_tasks.py\n\n# Check inactive users every Sunday 00:00\n0 0 * * 0 /opt/scheduler/inactive_users.py\n\n# Run project stats script every 10 mins\n*/10 * * * * /opt/scheduler/project_stats.py\n</code></pre>"},{"location":"dev/Backend/#type-checking","title":"Type Checking","text":"<ul> <li>It is a good idea to have your code 'type checked' to avoid potential   future bugs.</li> <li>To do this, install <code>pyright</code> (VSCode has an extension).</li> </ul>"},{"location":"dev/Backend/#interactive-debugging","title":"Interactive Debugging","text":"<ul> <li>The local version of the backend API that runs in <code>compose.yaml</code> includes the   <code>debugpy</code> package and a port bind to <code>5678</code>.</li> <li>This means you should be able to simply click the 'debugger' toolbar in VSCode,   then 'Remote - Server Debug'.</li> <li>When you add breakpoints to the code, the server should pause here to allow   you to step through and debug code.</li> <li>The configuration for this is in <code>.vscode/launch.json</code>.</li> </ul>"},{"location":"dev/Backend/#running-tests","title":"Running Tests","text":"<p>To run the backend tests locally, run:</p> <pre><code>docker compose run --rm api pytest\n\n# Or via Just\njust test backend\n</code></pre> <p>To assess coverage of tests, run:</p> <pre><code>docker compose run --rm --entrypoint='sh -c' api \\\n  'coverage run -m pytest &amp;&amp; coverage report -m'\n\n# Or via Just\njust test coverage\n</code></pre> <p>To assess performance of endpoints:</p> <ul> <li>We can use the pyinstrument profiler.</li> <li>While in debug mode (DEBUG=True), access any endpoint.</li> <li>Add the <code>?profile=true</code> arg to the URL to view the execution time.</li> </ul>"},{"location":"dev/Backend/#debugging-osm-fieldwork","title":"Debugging osm-fieldwork","text":"<ul> <li><code>osm-fieldwork</code> is an integral package for much of the functionality in Field-TM.</li> <li>The package is stored in this monorepo under:   <code>src/backend/packages/osm-fieldwork</code></li> <li>This directory is mounted inside the backend by default   during local development with <code>compose.yaml</code>.</li> <li>If you modify the code in the package, the container must be restarted   to reflect this:   <code>docker compose restart api</code></li> </ul>"},{"location":"dev/Backend/#accessing-s3-files-use-s3fs","title":"Accessing S3 Files use s3fs","text":"<p>The s3fs tool allows you to mount an S3 bucket on your filesystem, to browse like any other directory.</p> <p>Create a credentials file:</p> <pre><code># Replace ACCESS_KEY_ID and SECRET_ACCESS_KEY\necho ACCESS_KEY_ID:SECRET_ACCESS_KEY &gt; ${HOME}/.passwd-s3fs\nchmod 600 ${HOME}/.passwd-s3fs\n</code></pre>"},{"location":"dev/Backend/#mount-local-s3-using-just","title":"Mount local S3 using Just","text":"<pre><code>just mount-s3\n</code></pre>"},{"location":"dev/Backend/#mount-s3-manually","title":"Mount S3 manually","text":"<p>Install s3fs:</p> <pre><code>sudo apt update\nsudo apt install s3fs\n</code></pre> <p>Mount your bucket:</p> <p>If you wish for this to be permanent, see below.</p> <pre><code>sudo mkdir /mnt/fmtm/local\nsudo chown $(whoami):$(whoami) /mnt/fmtm/local\ns3fs fmtm-data /mnt/fmtm/local \\\n  -o passwd_file=/home/$(whoami)/s3-creds/fmtm-local \\\n  -o url=http://s3.fmtm.localhost:7050 \\\n  -o use_path_request_style\n</code></pre> <p>Access the files like a directory under: <code>/mnt/fmtm/local</code>.</p> <p>To mount permanently, add the following to <code>/etc/fstab</code>:</p> <p><code>fmtm-data /mnt/fmtm/local fuse.s3fs _netdev,allow_other,\\ use_path_request_style,passwd_file=/home/USERNAME/s3-creds/fmtm-local,\\ url=http://s3.fmtm.localhost:7050 0 0</code></p> <p>Note: you should replace USERNAME with your linux username.</p>"},{"location":"dev/Backend/#running-josm-in-the-dev-stack","title":"Running JOSM in the dev stack","text":"<ul> <li>Run JOSM with Field-TM via Just:</li> </ul> <pre><code>just start josm\n</code></pre> <p>This adds JOSM to the docker compose stack for local development.</p> <p>You can now call the JOSM API from Field-TM and changes will be reflected in the GUI.</p>"},{"location":"dev/Backend/#debugging-odk-forms-when-running-on-localhost","title":"Debugging ODK forms when running on localhost","text":"<ul> <li>ODK Collect requires an externally accessible instance of Central.</li> <li>To achieve this for local development / debugging, a good solution is Cloudflare   tunnelling (alternative to Ngrok).</li> <li> <p>There is a helper script to do this automatically for you:</p> <pre><code>just start tunnel\n</code></pre> </li> </ul> <p>Once started, use the output ODK Central URL from the terminal during project creation. The QRCode should now work in ODK Collect.</p> <p>The credentials for the local ODK Central instance are: Username: admin@hotosm.org Password: Password1234</p>"},{"location":"dev/Backend/#creating-projects-via-the-api","title":"Creating projects via the API","text":"<p>Field-TM supports API Keys, meaning in theory an external system could be used to create projects and call API endpoints, using the key.</p>"},{"location":"dev/Backend/#1-create-an-api-key","title":"1. Create an API key","text":"<ul> <li>Log into Field-TM as you the user you wish to use.</li> <li>The user must have organization manager permission for creating new projects.</li> <li> <p>Generate an API key by accessing the following endpoint in the same browser   you logged in as:</p> <p><code>/integrations/api-key</code></p> </li> </ul> <ul> <li>Save the API key somewhere safe! The key can access all your data in Field-TM!</li> <li>For any API call you make in the next section, ensure to set the <code>x-api-key</code>   header. See the example in the next section!</li> </ul>"},{"location":"dev/Backend/#2-create-project-metadata","title":"2. Create project metadata","text":"<p>The metadata for a project must be created first.</p> <p>!!! note         This step assumes you already have an organization and connected ODK         Central server configured. See here</p> <ul> <li>To create a project you will need the following:<ul> <li>Project name, description, instructions.</li> <li>The ID of the organization you manage.<ul> <li>Visit <code>/auth/me</code> while logged in to retrieve this.</li> </ul> </li> <li>A GeoJSON of the area you wish to map.</li> </ul> </li> </ul> <ul> <li>See further details of the exact endpoint requirements   here</li> </ul> <ul> <li> <p>Post the JSON data to the following endpoint: <code>/projects?org_id=xxx</code></p> <pre><code>import os\nimport requests\n\nFMTM_API_DOMAIN = os.getenv(\"FMTM_API_DOMAIN\")\nFMTM_API_KEY = os.getenv(\"FMTM_API_KEY\")\n\nresponse = requests.get(\n  f\"{FMTM_API_DOMAIN}/auth/me\",\n  headers={\"x-api-key\": FMTM_API_KEY},\n)\norg_id = response.json()[\"orgs_managed\"][-1]\n\nproject_data = {\n  \"name\": \"your new project\",\n  \"short_description\": \"short details here\",\n  \"description\": \"long details here\",\n  \"per_task_instructions\": \"user mapping instructions here\",\n  \"outline\": {\n      \"coordinates\": [\n          [\n              [85.317028828, 27.7052522097],\n              [85.317028828, 27.7041424888],\n              [85.318844411, 27.7041424888],\n              [85.318844411, 27.7052522097],\n              [85.317028828, 27.7052522097],\n          ]\n      ],\n      \"type\": \"Polygon\",\n  },\n  \"primary_geom_type\": \"POINT\",\n  \"new_geom_type\": \"POINT\",\n  \"task_split_type\": \"CHOOSE_AREA_AS_TASK\",\n  \"hashtags\": [\"hashtag1\", \"hashtag2\"],\n  \"visibility\": \"PRIVATE\",\n}\n\nresponse = requests.post(\n  f\"{FMTM_API_DOMAIN}/projects?org_id={org_id}\",\n  headers={\"x-api-key\": FMTM_API_KEY},\n  json=project_data,\n)\n\nproject_id = response.json().id\nprint(project_id)\n</code></pre> </li> </ul> <ul> <li>A successful POST will return a project_id, which you should save for   later steps.</li> </ul>"},{"location":"dev/Backend/#3-populate-the-tasks","title":"3. Populate the tasks","text":"<ul> <li>Task splitting can be done via multiple APIs.<ul> <li>By square: <code>/projects/split-by-square</code>.</li> <li>By splitting algorithm: <code>/projects/split-by-sql</code>.</li> </ul> </li> <li> <p>For projects that require no task splitting, simply pass the AOI   as the task area: <code>/projects/xxx/upload-task-boundaries</code></p> <pre><code>import json\n\ntask_geojson = json.dumps(\n  {\n    \"coordinates\": [\n        [\n            [85.317028828, 27.7052522097],\n            [85.317028828, 27.7041424888],\n            [85.318844411, 27.7041424888],\n            [85.318844411, 27.7052522097],\n            [85.317028828, 27.7052522097],\n        ]\n    ],\n    \"type\": \"Polygon\",\n  }\n).encode(\"utf-8\")\n\ntask_geojson_file = {\n    \"task_geojson\": (\n        \"file.geojson\",\n        BytesIO(task_geojson).read(),\n    )\n}\n\nresponse = requests.post(\n    f\"{FMTM_API_DOMAIN}/projects/{project_id}/upload-task-boundaries\",\n    headers={\"x-api-key\": FMTM_API_KEY},\n    files=task_geojson_file,\n)\n\nprint(response.json())\n</code></pre> </li> </ul>"},{"location":"dev/Backend/#4-submit-the-data-you-wish-to-map-optional","title":"4. Submit the data you wish to map (optional)","text":"<pre><code>from io import BytesIO\n\nwith open(\"/path/to/your/data.geojson\", \"rb\") as f:\n    data_extracts = BytesIO(json.dumps(json.load(f)))\n\n    data_extract_file = {\n        \"data_extract_file\": (\n            \"file.geojson\",\n            data_extracts.read(),\n        )\n    }\n\nresponse = requests.post(\n    f\"{FMTM_API_DOMAIN}/projects/{project_id}/upload-data-extract\",\n    headers={\"x-api-key\": FMTM_API_KEY},\n    files=data_extract_file,\n)\n\nprint(response.json())\n</code></pre>"},{"location":"dev/Backend/#5-generate-the-final-project-data","title":"5. Generate the final project data","text":"<ul> <li>For this step you need the XLSForm you wish to use for the survey.<ul> <li>Validate the form via this   link   first.</li> </ul> </li> </ul> <pre><code>from io import BytesIO\nfrom pathlib import Path\n\nxlsform_file = Path(\"/path/to/your/form.xls\")\nwith open(xlsform_file, \"rb\") as xlsform_data:\n    xlsform_obj = BytesIO(xlsform_data.read())\n\nxform_file = {\n    \"xlsform\": (\n        \"form.xls\",\n        xlsform_obj,\n    )\n}\nresponse = requests.post(\n    f\"{FMTM_API_DOMAIN}/projects/{project_id}/generate-project-data\",\n    headers={\"x-api-key\": FMTM_API_KEY},\n    files=xform_file,\n)\n</code></pre> <p>You should have a project you can now access at:</p> <p><code>https://the.field.tm.domain/projects/{project_id}</code></p>"},{"location":"dev/Frontend/","title":"Frontend Deployment for Development","text":""},{"location":"dev/Frontend/#1-start-the-frontend-with-docker","title":"1. Start the Frontend with Docker","text":"<p>This is the easiest way to manage all of the services together.</p>"},{"location":"dev/Frontend/#1a-starting-the-api-containers","title":"1A: Starting the API Containers","text":"<p>For details on how to run the API first, please see: Backend Docs</p>"},{"location":"dev/Frontend/#1b-starting-the-frontend-containers","title":"1B: Starting the Frontend Containers","text":"<ol> <li>You will need to Install Docker    and ensure that it is running on your local machine.</li> <li>From the command line: navigate to the top level directory of the Field-TM project.</li> <li>From the command line run: <code>docker compose build ui</code>    This is essential, as the development container for the frontend is    different to production.</li> <li> <p>Once everything is built, from the command line run: <code>docker compose up -d ui</code></p> </li> <li> <p>If everything goes well you should now be able to    navigate to the project in your browser: http://fmtm.localhost:7050</p> </li> </ol> <p>Note: during development, if you rebuild the frontend, then run 'docker compose up -d', the node_modules directory may not be updated. To solve this, use the flag: --renew-anon-volumes on docker compose up.</p>"},{"location":"dev/Frontend/#2-start-the-frontend-locally","title":"2. Start the Frontend locally","text":"<p>To run the frontend locally, connected to the staging server as a backend:</p> <pre><code>just start frontend-dev\n</code></pre> <p>The mapper frontend can be started with a similar command:</p> <pre><code>just start mapper-frontend-dev\n</code></pre>"},{"location":"dev/Frontend/#frontend-tips","title":"Frontend Tips","text":"<p>The frontend is built with React and Typescript. Here are some tips on how to work with the frontend:</p>"},{"location":"dev/Frontend/#adding-environment-variables","title":"Adding Environment Variables","text":"<p>To add environment variables, create a .env.local file in the <code>src/frontend</code> directory. Any variables defined here will override those in <code>.env</code>.</p>"},{"location":"dev/Frontend/#adding-new-routes","title":"Adding New Routes","text":"<p>To add a new route, create a new page in the src/frontend/pages directory. Then add a new entry to the <code>src/frontend/router.tsx</code> file.</p>"},{"location":"dev/Frontend/#adding-new-components","title":"Adding New Components","text":"<p>To add a new component, create a new .tsx file in the src/frontend/ components directory.</p>"},{"location":"dev/Frontend/#frontend-testing","title":"Frontend Testing","text":"<p>To run the frontend tests locally, run:</p> <pre><code>just test frontend\n</code></pre> <p>View the HTML report at: <code>http://localhost:9323</code>.</p> <p>To run the Field-TM UI for interactive testing, run:</p> <pre><code>just test frontend-e2e-interactive\n</code></pre>"},{"location":"dev/Production/","title":"Deployment for Production","text":"<p>The following instructions are needed to set up Field-TM for production on your own cloud server.</p>"},{"location":"dev/Production/#set-up-the-field-tm-on-a-cloud-server","title":"Set up the Field-TM on a cloud server","text":""},{"location":"dev/Production/#set-up-a-server-and-domain-name","title":"Set up a server and domain name","text":"<ul> <li>Get a cloud server (tested with Ubuntu 22.04).</li> <li>Set up a domain name, and point the DNS to your cloud server.</li> <li>SSH into your server. Set up a user with sudo called   svcfmtm. this   is a good guide for basic server setup including creation of a   user.</li> </ul>"},{"location":"dev/Production/#run-the-install-script","title":"Run the install script","text":"<pre><code>curl -L https://get.fmtm.dev -o install.sh\nbash install.sh\n\n# Then follow the prompts\n</code></pre>"},{"location":"dev/Production/#additional-environment-variables","title":"Additional Environment Variables","text":"<p>Variables are set in <code>.env</code>. Some can be updated manually, as required.</p>"},{"location":"dev/Production/#extra_cors_origins","title":"EXTRA_CORS_ORIGINS","text":"<p>If extra cors origins are required for testing, the variable <code>EXTRA_CORS_ORIGINS</code> is a set of comma separated strings, e.g.: http://fmtm.localhost:7050,http://some.other.domain</p>"},{"location":"dev/Production/#api_prefix","title":"API_PREFIX","text":"<p>It is also possible to use the API_PREFIX variable if the api is served under, e.g. /api on the domain. However, this isn't the recommended approach, and testing is minimal.</p>"},{"location":"dev/Production/#central_webhook_api_key","title":"CENTRAL_WEBHOOK_API_KEY","text":"<ul> <li>This variable allows central-webhook to make requests to the backend API.</li> <li>We use this to update the feature/entity colours after mapping events occur.</li> <li>Create an API Key for user <code>svcfmtm</code>, which will add the key to the database.</li> <li>Set the key for the <code>CENTRAL_WEBHOOK_API_KEY</code> variable, and this should   allow the webhook to work.</li> </ul>"},{"location":"dev/Production/#s3_access_key-s3_secret_key","title":"S3_ACCESS_KEY &amp; S3_SECRET_KEY","text":"<p>In most circumstances these variables should be provided to authenticate with your S3 provider. However, some providers (such as AWS), allow for <code>instance profiles</code> to be attached to your server, with required permissions preconfigured. By default connections made from the EC2 instance with attached <code>instance profile</code> will be automatically authenticated. S3_ACCESS_KEY and S3_SECRET_KEY should be set to blank strings in this case <code>=\"\"</code>.</p>"},{"location":"dev/Production/#odk_-variables","title":"ODK_ Variables","text":"<p>These can point to an externally hosted instance of ODK Central.</p> <p>Or ODK Central can be started as part of the Field-TM docker compose stack, and variables should be set accordingly.</p>"},{"location":"dev/Production/#other-domains","title":"Other Domains","text":"<p>If you run Field-TM with ODK and Minio (S3) included, then the domains will default to:</p> <pre><code>${FMTM_DOMAIN} --&gt; Frontend\napi.${FMTM_DOMAIN} --&gt; Backend\nodk.${FMTM_DOMAIN} --&gt; ODK Central\ns3.${FMTM_DOMAIN} --&gt; S3 / Minio\nsync.${FMTM_DOMAIN} --&gt; The DB Sync Service\nmapper.${FMTM_DOMAIN} --&gt; The Mapper UI\n</code></pre> <p>These defaults can be overridden with respective environment variables:</p> <pre><code>FMTM_API_DOMAIN\nFMTM_ODK_DOMAIN\nFMTM_S3_DOMAIN\nFMTM_SYNC_DOMAIN\n</code></pre>"},{"location":"dev/Production/#connecting-to-a-remote-database","title":"Connecting to a remote database","text":"<ul> <li>A database may be located on a headless Linux server in the cloud.</li> <li>To access the database via GUI tool such as PGAdmin,   it is possible using port tunneling.</li> </ul> <pre><code>ssh username@server.domain -N -f -L {local_port}:localhost:{remote_port}\n\n# Example\nssh root@fmtm.hotosm.org -N -f -L 5430:localhost:5433\n</code></pre> <p>This will map port 5432 on the remote machine to port 5430 on your local machine.</p>"},{"location":"dev/Production/#backup-process","title":"Backup Process","text":"<ul> <li> <p>Backup Field-TM database:</p> <pre><code>GIT_BRANCH=dev\nbackup_filename=\"fmtm-db-${GIT_BRANCH}-$(date +'%Y-%m-%d').sql.gz\"\necho $backup_filename\n\ndocker exec -i -e PGPASSWORD=PASSWORD_HERE \\\nfmtm-${GIT_BRANCH}-fmtm-db-1 \\\npg_dump --verbose --encoding utf8 --format c -U fmtm fmtm \\\n| gzip -9 &gt; \"$backup_filename\"\n</code></pre> </li> </ul> <p>Note: if you are dumping to import into a pre-existing database, you should also include the --clean flag.</p> <p>This will drop the existing tables prior to import, and should prevent conflicts.</p> <ul> <li> <p>Backup ODK Central database:</p> <pre><code>GIT_BRANCH=dev\nbackup_filename=\"fmtm-odk-db-${GIT_BRANCH}-$(date +'%Y-%m-%d').sql.gz\"\necho $backup_filename\n\ndocker exec -i -e PGPASSWORD=PASSWORD_HERE \\\nfmtm-${GIT_BRANCH}-central-db-1 \\\npg_dump --verbose --encoding utf8 --format c -U odk odk | \\\ngzip -9 &gt; \"$backup_filename\"\n</code></pre> </li> </ul> <ul> <li>Backup the S3 data:</li> </ul> <pre><code>GIT_BRANCH=dev\nbackup_filename=\"fmtm-s3-${GIT_BRANCH}-$(date +'%Y-%m-%d').tar.gz\"\necho $backup_filename\n\ndocker run --rm -i --entrypoint=tar \\\n-u 0:0 \\\n-v $PWD:/backups -v \\\nfmtm-s3-data-${GIT_BRANCH}:/mnt/data \\\nghcr.io/hotosm/field-tm/backend:${GIT_BRANCH} \\\n-cvzf \"/backups/$backup_filename\" /mnt/data/\n</code></pre>"},{"location":"dev/Production/#manual-database-restores","title":"Manual Database Restores","text":"<p>The restore should be as easy as:</p> <pre><code># On a different machine (else change the container name)\nGIT_BRANCH=dev\nbackup_filename=fmtm-db-${GIT_BRANCH}-XXXX-XX-XX.sql.gz\n\ncat \"$backup_filename\" | gunzip | \\\ndocker exec -i -e PGPASSWORD=NEW_PASSWORD_HERE \\\nfmtm-${GIT_BRANCH}-fmtm-db-1 \\\npg_restore --verbose -U fmtm -d fmtm\n\n# For ODK\nbackup_filename=fmtm-odk-db-${GIT_BRANCH}-XXXX-XX-XX.sql.gz\ncat \"$backup_filename\" | gunzip | \\\ndocker exec -i -e PGPASSWORD=NEW_PASSWORD_HERE \\\nfmtm-${GIT_BRANCH}-central-db-1 \\\npg_restore --verbose -U odk -d odk\n\n# For S3 (with the backup file in current dir)\nbackup_filename=fmtm-s3-${GIT_BRANCH}-XXXX-XX-XX.tar.gz\ndocker run --rm -i --entrypoint=tar \\\n-u 0:0 --working-dir=/ \\\n-v $backup_filename:/$backup_filename -v \\\nghcr.io/hotosm/field-tm/backend:${GIT_BRANCH} \\\n-xvzf \"$backup_filename\"\n</code></pre> <p>However, in some cases you may have existing data in the database (i.e. if you started the docker compose stack &amp; the API ran the migrations!).</p> <p>In this case you can import into a fresh db, before attaching to the Field-TM containers:</p> <pre><code>export GIT_BRANCH=dev\n\n# Shut down the running database &amp; delete the data\ndocker compose -f deploy/compose.$GIT_BRANCH.yaml down -v\n\n# First, ensure you have a suitable .env with database vars\n# Start the databases only\ndocker compose -f deploy/compose.$GIT_BRANCH.yaml up -d fmtm-db central-db\n\n# (Optional) restore odk central from the backup\nbackup_filename=fmtm-central-db-${GIT_BRANCH}-XXXX-XX-XX-sql.gz\n\ncat \"$backup_filename\" | gunzip | \\\ndocker exec -i \\\nfmtm-${GIT_BRANCH}-central-db-1 \\\npg_restore --verbose -U odk -d odk\n\n# Restore fmtm from the backup\nbackup_filename=fmtm-db-${GIT_BRANCH}-XXXX-XX-XX-sql.gz\n\ncat \"$backup_filename\" | gunzip | \\\ndocker exec -i \\\nfmtm-${GIT_BRANCH}-fmtm-db-1 \\\npg_restore --verbose -U fmtm -d fmtm\n\n# Run the entire docker compose stack\ndocker compose -f deploy/compose.$GIT_BRANCH.yaml up -d\n</code></pre>"},{"location":"dev/Production/#help-field-tm-prod-is-broken","title":"Help! Field-TM Prod Is Broken \ud83d\ude28","text":""},{"location":"dev/Production/#debugging","title":"Debugging","text":"<ul> <li> <p>Log into the production server, fmtm.hotosm.org and view the container logs:</p> <pre><code>docker logs fmtm-main-api-1\ndocker logs fmtm-main-api-2\ndocker logs fmtm-main-api-3\ndocker logs fmtm-main-api-4\n</code></pre> <p>Note there are four replica containers running, and any one of them could have handled the request. You should check them all.</p> <p>They often provide useful traceback information, including timestamps.</p> </li> </ul> <ul> <li>View error reports on Sentry: https://humanitarian-openstreetmap-tea.sentry.io   You can get very detailed tracebacks here, even with the SQL executed on   the database amongst other things.</li> </ul> <ul> <li>Reproduce the error on your local machine!</li> </ul>"},{"location":"dev/Production/#making-a-hotfix","title":"Making a hotfix","text":"<ul> <li>Sometimes fixes just can't wait to go through the dev --&gt;   staging --&gt; production cycle. We need the fix now!</li> </ul> <ul> <li>In this case, a <code>hotfix</code> can be made directly to the <code>main</code> branch:<ul> <li>Create a branch <code>hotfix/something-i-fixed</code>, add your code and test   it works locally.</li> <li>Push your branch, then create a PR against the <code>main</code> branch in Github.</li> <li>Merge in the PR and wait for the deployment.</li> <li>Later the code can be pulled back into develop / staging.</li> </ul> </li> </ul>"},{"location":"dev/Setup/","title":"Developer Setup Guide","text":""},{"location":"dev/Setup/#overview","title":"Overview","text":"<p>The Field-TM can be divided into four parts:</p> <ol> <li>An API backend in FastAPI (code in: <code>src/backend</code>)</li> <li>A desktop-based management frontend website in React (code in: <code>src/frontend</code>)</li> <li>A mobile-based mapper frontend website in Svelte (code in: <code>src/mapper</code>)</li> <li>Supporting services that tie everything together:<ul> <li>ODK Central to collect the survey submissions.</li> <li>Minio to serve static content via S3.</li> <li>Electric-SQL to provide a 'sync-layer' for real-time syncing of    content between users.</li> <li>Bunkerweb a 'web application firewall' (basically Nginx with    additional security), to sit in front of everything and add an extra layer    of security and load balancing.</li> </ul> </li> </ol>"},{"location":"dev/Setup/#field-tm-backend","title":"Field-TM Backend","text":"<p>To view more details about the backend click here.</p>"},{"location":"dev/Setup/#field-tm-frontend","title":"Field-TM Frontend","text":"<p>To view more details about the frontend click here.</p>"},{"location":"dev/Setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Stable internet connection.</li> <li>Git installed on your system.</li> <li>Docker and Docker Compose installed on your system.</li> </ul> <p>See further details here</p>"},{"location":"dev/Setup/#setup-repository-fork","title":"Setup: Repository Fork","text":""},{"location":"dev/Setup/#1-review-documentation","title":"1. Review documentation","text":"<p>Don't forget to review the Contribution guidelines and our Code of Conduct before contributing!</p>"},{"location":"dev/Setup/#2-fork-the-repository","title":"2. Fork the repository","text":"<p>Forking creates a copy of the repository in your own GitHub account. Go to the Field Tasking Manager repository and click the \"Fork\" button in the top right corner of the page.</p>"},{"location":"dev/Setup/#3-navigate-to-your-working-directory","title":"3. Navigate to your working directory","text":"<p>Open a terminal and navigate to the directory you want to work in using the following command:</p> <p><code>cd &lt;work-dir&gt;</code></p> <p>Make sure to replace <code>&lt;work-dir&gt;</code> with the name of your directory.</p>"},{"location":"dev/Setup/#4-clone-the-forked-repository","title":"4. Clone the forked repository","text":"<p>Clone the forked repository to your local machine using the following command:</p> <p><code>git clone https://github.com/&lt;your-username&gt;/fmtm.git</code></p> <p>Make sure to replace <code>&lt;your-username&gt;</code> with your GitHub username.</p>"},{"location":"dev/Setup/#setup-running-field-tm","title":"Setup: Running Field-TM","text":"<p>See detailed instructions for this step here.</p>"},{"location":"dev/Setup/#setup-contributing-code","title":"Setup: Contributing Code","text":""},{"location":"dev/Setup/#1-create-a-new-branch","title":"1. Create a new branch","text":"<p>Create a new branch for your changes using the following command:</p> <p><code>git checkout -b branch-name</code></p> <p>Make sure to give your branch a descriptive name that reflects the changes you'll be making.</p>"},{"location":"dev/Setup/#2-make-changes","title":"2. Make changes","text":"<p>Make your contribution, run tests where needed and save.</p>"},{"location":"dev/Setup/#3-add-changes","title":"3. Add changes","text":"<p>Add the changes you've made using the following command:</p> <p><code>git add &lt;file-name&gt;</code></p> <p>Make sure you replace <code>&lt;file-name&gt;</code> with the name of the file you made changes to.</p>"},{"location":"dev/Setup/#4-commit-and-push","title":"4. Commit and push","text":"<p>Once you've added changes, commit them to your local branch using the following command:</p> <p><code>git commit -m \"Add feature\"</code></p> <p>Make sure to write a descriptive commit message that explains the changes you've made. Then, push your changes to your forked repository using the following command:</p> <p><code>git push origin branch-name</code></p>"},{"location":"dev/Setup/#5-submit-a-pull-request","title":"5. Submit a pull request","text":"<p>Go to your forked repository on GitHub and click the \"Pull requests\" tab, then click \"Create pull request\".</p> <p>This will open a new pull request in the Field-TM repository, where you can:</p> <ul> <li>Select the branch you wish to merge into <code>dev</code>.</li> <li>Describe your changes and request that they be merged into the main codebase.</li> </ul> <p>That's it! You've now contributed to the Field Tasking Manager.</p>"},{"location":"dev/Setup/#alternative-operating-systems","title":"Alternative Operating Systems","text":""},{"location":"dev/Setup/#windows","title":"Windows","text":"<p>Windows Subsystem for Linux (WSL) can be used to run Docker.</p> <p>This will run a Linux machine inside Windows very efficiently.</p> <p>To install follow the official instructions.</p> <p>Then continue with the Field-TM installation.</p>"},{"location":"dev/Setup/#macos","title":"MacOS","text":"<p>Colima is recommended to run <code>docker</code> and <code>docker compose</code> commands.</p> <p>Install colima, docker, docker compose using brew:</p> <pre><code>brew install colima\nbrew install docker docker-compose\n</code></pre> <p>Then configure the docker compose plugin to work on MacOS:</p> <pre><code>mkdir -p ~/.docker/cli-plugins\n\nln -sfn $(brew --prefix)/opt/docker-compose/bin/docker-compose ~/.docker/cli-plugins/docker-compose\n</code></pre> <p>Run Colima:</p> <pre><code>colima start\n</code></pre> <p>Then continue with the Field-TM installation.</p> <p>Note: only tagged backend images are multi-architecture, supporting MacOS. The regular images for fast continuous deployment are not: <code>backend:dev</code>, <code>backend:staging</code>, <code>backend:main</code>.</p>"},{"location":"dev/Setup/#a-note-on-docker-desktop","title":"A Note on Docker Desktop","text":"<p>While in theory Field-TM should run using Docker-Desktop, it has not been tested.</p> <p>The authors opinion is that the official Linux Docker Daemon should be installed in WSL or MacOS, instead of using Docker Desktop.</p> <p>Colima is a wrapper to run the Docker Daemon.</p> <p>Although Docker Desktop may have a user friendly GUI, it simply runs docker commands inside a Linux virtual machine underneath.</p> <p>It is often easier and more flexible to do this yourself. Plus it gives you access to all other other tools available in a Linux operating system!</p>"},{"location":"dev/Setup/#help-and-support","title":"Help and Support","text":"<p>If you encounter any issues or need assistance while using Field-TM, you can access the following resources:</p> <ul> <li>Check the FAQs.</li> <li>Message the team in the available   slack channel: #field-mapping-tasking-manager</li> </ul> <p>Happy coding!</p> <p>The Field-TM Developer Team</p>"},{"location":"dev/Troubleshooting/","title":"Troubleshooting \ud83c\udd98","text":""},{"location":"dev/Troubleshooting/#running-field-tm-standalone","title":"Running Field-TM standalone","text":"<ul> <li>Although it's easiest to use Docker, sometimes it may no be feasible, or   not preferred.</li> <li>We use a tool called <code>uv</code> to manage dependencies.</li> <li>Be careful when running Field-TM you are not accidentally pulling in your   system packages.</li> </ul>"},{"location":"dev/Troubleshooting/#tips","title":"Tips","text":"<ul> <li>Troubleshoot the packages <code>uv</code> sees with:   <code>uv pip list</code></li> <li> <p>Check a package can be imported in the uv-based Python environment:</p> <pre><code>uv run python\nimport fastapi\n</code></pre> </li> </ul> <p>If you receive errors such as:</p> <pre><code>pydantic.error_wrappers.ValidationError: 3 validation errors for Settings\nOSM_URL\n  field required (type=value_error.missing)\nOSM_SCOPE\n  field required (type=value_error.missing)\n</code></pre> <p>Then you need to set the env variables on your system.</p> <p>Alternatively, run via <code>just</code>:</p> <pre><code>just start backend-no-docker\n</code></pre>"},{"location":"dev/Troubleshooting/#migrations","title":"Migrations","text":"<ul> <li>Migrations are a way to manage changes to the database schema over time.</li> <li>They are handled automatically by a management script when Field-TM starts up.</li> <li>Individual SQL migration scripts are placed in the <code>src/migrations</code> dir.<ul> <li>These should be idempotent, i.e. can run over and over without causing errors.</li> <li>There should also be a commented out SQL script for how to revert the migration.</li> <li>Scripts should be named sequentially,   i.e. the first is 001-some-migration.sql,   then they increment by one.</li> <li>Example <code>000-remove-user-password.sql</code>:</li> </ul> </li> </ul> <pre><code>-- ## Migration to remove password field from public.users (replaced with OSM OAuth)\n\n\n-- ## Apply Migration\n-- Start a transaction\nBEGIN;\n-- Drop the 'password' column if it exists\nALTER TABLE IF EXISTS public.users\nDROP COLUMN IF EXISTS password;\n-- Commit the transaction\nCOMMIT;\n\n\n-- ## Revert Migration (comment above, uncomment below)\n-- -- Start a transaction\n-- BEGIN;\n-- -- Add the 'password' column back if it doesn't exist\n-- ALTER TABLE public.users\n-- ADD COLUMN IF NOT EXISTS password character varying;\n-- -- Commit the transaction\n-- COMMIT;\n</code></pre> <ul> <li>When the docker compose stack starts,   an additional container starts up and runs a bash script once.</li> <li>The script generates a table called <code>migrations</code>,   which simply tracks the script name and execution date.</li> <li>The <code>migrations</code> directory is scanned for new files,   and if there is no record in the database of being applied,   the migration is applied.</li> </ul>"},{"location":"dev/Troubleshooting/#running-migrations-manually","title":"Running Migrations Manually","text":"<p>If for any reason you need to run migrations manually, there are a few options:</p>"},{"location":"dev/Troubleshooting/#restart-the-migrations-container","title":"Restart the migrations container","text":"<pre><code>docker compose restart migrations\n</code></pre>"},{"location":"dev/Troubleshooting/#run-the-migration-script-in-docker","title":"Run the migration script in docker","text":"<p>This runs inside the backend container:</p> <pre><code>docker compose exec api bash /migrate-entrypoint.sh`\n</code></pre>"},{"location":"dev/Troubleshooting/#run-the-migration-script-directly","title":"Run the migration script directly","text":"<p>Make sure you have the 4 env vars for the database connection set on your machine, then run the migration script directly:</p> <pre><code>bash src/backend/migrate-entrypoint.sh\n</code></pre>"},{"location":"dev/release-checklist/","title":"Making Releases","text":"<ul> <li>Typically <code>dev</code> would have been merged into <code>staging</code>, and code   in <code>staging</code> thoroughly tested.</li> <li>Once everything is verified to be working, a release can be made.</li> <li> <p>Normally I would do a simple hard reset of <code>main</code> to the latest   tested <code>staging</code> (ensure all cherry-picked hotfixes are also   present on staging in this case):</p> <pre><code>git checkout main\ngit reset --hard origin/staging\n</code></pre> </li> </ul>"},{"location":"dev/release-checklist/#checklist","title":"Checklist","text":"<p>To make a new release of Field-TM, ensure the following is done:</p> <ol> <li>Code is pulled through to the <code>main</code> branch.</li> <li>Enter the backend directory: <code>cd src/backend</code>.</li> <li>Bump the version: <code>cz bump --check-consistency</code><ul> <li>To make manual control of which version to bump, the    <code>--increment PATCH</code> or <code>--increment MINOR</code> flag can be    used.</li> </ul> </li> <li>If the uv.lock file is relocked and breaks the commit,    then commit manually by copying the commit message printed    to the terminal:    <code>git commit -m \"bump: 2025.1.1 --&gt; 2025.1.2\"</code>    then ensure the tag is present    <code>git tag 2025.1.2</code></li> <li>Push the latest commits and tag:    <code>git push &amp;&amp; git push --tag</code></li> <li>Create a new release on Github via the UI, based on the new    tag.</li> <li>Ensure the    Github workflow    succeeds in creating the latest tagged image.</li> </ol>"},{"location":"example-xlsforms/","title":"Example XLSForms","text":"<p>This directory contains some example XLSForms (surveys) taken from Field-TM testing.</p> <p>The XLSForms were produced via iterative feedback from field teams from various organisations.</p>"},{"location":"example-xlsforms/#slum-building-assessment-monrovia-liberia","title":"Slum Building Assessment (Monrovia, Liberia)","text":"<ul> <li>XLSForm</li> <li>Generated with help from Slum Dwellers International and local partners in Monrovia.</li> <li>Detailed info about project</li> </ul>"},{"location":"example-xlsforms/#building-natural-hazard-assessment-bali-indonesia","title":"Building Natural Hazard Assessment (Bali, Indonesia)","text":"<ul> <li>XLSForm</li> <li>Generated with help from BPBD in Bali.</li> <li>Used in the Karangasem region.</li> <li>Particular attention was paid to the unique temple structures in Bali, often   situated within a complex/compound area.</li> </ul>"},{"location":"example-xlsforms/#simple-building-wildfires-assessment-alpa-corral-argentina","title":"Simple Building Wildfires Assessment (Alpa Corral, Argentina)","text":"<ul> <li>XLSForm</li> <li>Generated with help from firefighters from rural towns of Argentina.</li> <li>Used for wildfire prevention and response.</li> <li>Particular attention was paid to place names and building materials.</li> </ul>"},{"location":"manuals/field-mapping-examples/","title":"Field Mapping Examples","text":"<p>Users often write their own guides for the team they are working with.</p> <p>This page provides some links to user-generated guides of Field-TM over time.</p>"},{"location":"manuals/field-mapping-examples/#know-your-city-africa-ghana-slum-mapping","title":"Know Your City Africa: Ghana Slum Mapping","text":"<p>Link to project document, including detail on the mapping workflow.</p>"},{"location":"manuals/field-mapping-examples/#osm-rwanda-remote-mapping","title":"OSM Rwanda Remote Mapping","text":"<p>Link OSM Rwanda user experience report</p>"},{"location":"manuals/mapping/","title":"Field Mappers","text":"<p>The Mapper Page was developed to provide a simpler, more intuitive mapping experience for field mappers.</p>"},{"location":"manuals/mapping/#prerequisites","title":"Prerequisites","text":""},{"location":"manuals/mapping/#device-requirements","title":"Device Requirements","text":"<p>Verify that your mobile device meets the minimum specifications required for field mapping:</p> <ul> <li>RAM: 3GB</li> <li>Storage: Generally 1GB should be enough, but if using many large basemaps,   more may be required.</li> <li> <p>Operating System: Android 10 or higher for the best security and   performance.</p> <p>Tip</p> <p>Go to the file manager or \"My Files\" on your mobile device to see   the device storage.</p> <p>Check your phone settings for information about device settings   such as RAM and processors.</p> </li> </ul>"},{"location":"manuals/mapping/#install-fieldtm","title":"Install FieldTM","text":"<ul> <li>We recommend using Chrome-based browsers on your mobile device to access   the Field-TM platform for optimal performance.</li> <li>It is best to install the web application (not via the app store, but through   your web browser). This can be done through the browser menu, often written as   'Add to home screen':   </li> </ul>"},{"location":"manuals/mapping/#part-a-setup-for-mapping","title":"Part (A): Setup For Mapping","text":""},{"location":"manuals/mapping/#step-1-access-the-mapper-page","title":"Step 1: Access the Mapper Page","text":"<ul> <li>Option 1: Click on the project cards from your mobile device</li> <li>Option 2: Go to <code>https://mapper.fmtm.hotosm.org/&lt;project_id&gt;</code> to open   the Mapper Page for a specific project.</li> </ul> <p>Note</p> <p>This functionality is designed for mappers in the field, so it is   recommended to use a mobile device to access it. If you use a computer   browser, you will be redirected to the project details page instead of   mapper's page.</p> <p>Warning</p> <p>Here you may log into the website to be attributed with you edits.</p> <p>If you do not log in, a generic account will be used to record your   edits and data collection.</p>"},{"location":"manuals/mapping/#step-2-load-imagery-optional","title":"Step 2: Load Imagery (optional)","text":"<ul> <li>You can load the base imagery by clicking on offline mode option   (second tab on bottom navigation bar).</li> <li>Choose the layer you want to load and click on Show on Map to visualise   the layer on map.</li> <li> <p>The layer can also be stored for offline mapping by clicking   Store Offline.</p> <p></p> </li> </ul> <p>Tip</p> <p>This step should probably be done prior to leaving for the field!</p> <p>The files can be a few 100MB in size.</p> <p>MBTiles are used for loading into ODK Collect.   PMTiles are used for navigating in Field-TM.</p> <p>If you encounter issues with the base imagery, contact your project   manager.</p>"},{"location":"manuals/mapping/#step-3-install-the-custom-odk-collect-mobile-app","title":"Step 3: Install The Custom ODK Collect Mobile App","text":"<p>Note</p> <p>It is recommended to not use ODK Collect in most, but instead use the automatically configured WebForms.</p> <p>If you must use ODK Collect, then configuration via QRCodes will be required.</p> <ul> <li>The first time you load the project, you should be prompted to download   the custom ODK <code>.apk</code> from the sidebar.</li> <li> <p>Once downloaded, you should install the custom ODK Collect application.</p> <p> </p> </li> </ul> <p>Tip</p> <p>If you already have ODK Collect installed, you may have to uninstall   it first.</p> <p>You may have to enable installing from unknown sources in your device   settings too.</p>"},{"location":"manuals/mapping/#step-4-configure-odk-collect-once-only","title":"Step 4: Configure ODK Collect (once only)","text":"<ul> <li>Option 1: Scan the QR code displayed on the Mapper page using   the custom ODK Collect mobile application.</li> </ul> <ul> <li>Option 2: Download the QR code and import it into ODK Collect to   load the project. Follow the steps below:<ol> <li>Open ODK Collect.</li> <li>Click the project name in the top right corner.</li> <li>Tap the menu icon (three horizontal dots).</li> <li>Select Import QR Code.</li> <li>Browse to the downloaded QR image and load the project.</li> </ol> </li> </ul> <p>Tip</p> <p>For a demonstration of the process above, click the i info icon   on the QR Code tab of the mapper page.</p>"},{"location":"manuals/mapping/#part-b-mapping-features","title":"Part (B): Mapping Features","text":"<p>Before starting to map features, ensure that geolocation is enabled. This will allow you to access your live location, making navigation easier.</p> <p>You may either map an existing feature OR map a new feature.</p>"},{"location":"manuals/mapping/#select-an-existing-feature-via-odk-collect","title":"Select An Existing Feature via ODK Collect","text":"<p>In most cases we are submitting a survey about a feature that already exists.</p> <ul> <li>Click on a task area: the features within will be displayed.</li> <li>Now click on a feature you wish to map: a popup will appear.</li> <li>Now click 'Map Feature In ODK': ODK Collect will open, with the   feature pre-selected in the survey (no need to open the ODK map!).</li> <li>If the feature you are trying to map is further than 50m away, you will   be prompted with warning message to ensure you made the correct selection.</li> <li>Complete the survey and submit.</li> </ul> <p></p> <p>Tip</p> <p>You may manually click 'Start Mapping' for a task area.</p> <p>However, the task will be automatically locked for you   if you map a feature within the task area.</p> <p>Note</p> <p>The task area will change colour based on it's status.</p> <p>The legend explaining these colours can be opened on the map:</p> <p></p>"},{"location":"manuals/mapping/#select-an-existing-feature-via-webforms","title":"Select An Existing Feature via WebForms","text":"<p>Webform is the new functionality added on FMTM, where mappers can directly fill up and upload form via same browser without installing ODK Collect mobile application.</p> <ul> <li>Click on a task area: the features within will be displayed.</li> <li>Now click on a feature you wish to map: a popup will appear.</li> <li>Click on 'Collect Data' which will open the form directly on the same browser.</li> <li> <p>Complete the survey and Upload.</p> <p></p> </li> </ul> <p>Note</p> <p>Currently, we need to have stable internet connection to upload the survey. We expect offline saving of form on local and sync when internet is available functionality on next release.</p>"},{"location":"manuals/mapping/#mapping-a-new-feature","title":"Mapping A New Feature","text":"<p>Sometimes the feature does not exist on the map yet!</p> <ul> <li>Click on a task area: a popup will display.</li> <li>At the top right, there is a button Map New Feature.</li> <li>Click on the map to create a new geometry.</li> <li>Once drawn, accept the dialog to confirm the geometry is correct.</li> <li>If you are using ODK Collect, you will be redirected to ODK Collect to fill   out the survey data for the newly created feature.   -If you are using WebForms used for that project, form will be opened on   the same browser and you can fill out the survey for that feature.   </li> </ul> <p>Note</p> <p>The task area will change colour based on it's status.</p> <p>Consult the project manager to determine if the feature should be a   polygon (drawing all corners of the feature in ODK) or point   (collecting only the GPS point of the feature).</p> <p>Confirm the exact point (gate location, right corner, center of the   building) and GPS accuracy required for consistency and quality data.</p>"},{"location":"manuals/mapping/#repeat-the-process","title":"Repeat The Process","text":"<ul> <li>After ODK collect based form submission, you have to get back to   Field-TM and select the another feature for mapping.</li> <li>After WebForm based form submission, you will automatically get back to mapper's   page where you can select another feature for mapping.</li> <li> <p>You also also have to click the Sync Status button to see the feature   turn green.</p> <p></p> </li> </ul> <ul> <li>Select another feature to map (repeat from step 5)!</li> </ul> <p>Note</p> <p>You need internet access to update the feature status.</p> <p>In a future release, this process will be handled seamlessly   without user interaction.</p>"},{"location":"manuals/mapping/#working-offline","title":"Working Offline","text":"<p>It is possible to work entirely offline, once FieldTM has been loaded while internet is available.</p> <p>To achieve this:</p> <ul> <li>Visit https://mapper.fmtm.hotosm.org   once from the phone you wish to map with.<ul> <li>This will cache the 12 most recent projects on your device.</li> <li>To cache a different set of projects, use the search or   next/previous page functionality.</li> </ul> </li> <li>For best results, 'Install' the webpage on your device, creating   a shortcut on your home screen.</li> <li>Click on the project you wish to map offline.<ul> <li>The project details will be stored entirely offline.</li> <li>You may also go to the 'Offline' tab, to download additional   offline data such as base map imagery.</li> </ul> </li> <li>Upon opening the installed app, you should be able to browse   the cached versions of your projects (note they will not update   while offline).</li> <li>Submissions can be made while offline &amp; they will since when   connectivity is restored.</li> </ul>"},{"location":"manuals/mapping/#upcoming-improvements","title":"Upcoming improvements","text":"<p>Refer the milestone: https://github.com/hotosm/field-tm/milestone/49</p>"},{"location":"manuals/project-managers/","title":"Project Manager Manual for Field-TM","text":"<p>This manual is a step by step guide for the project managers on how to get started with the Field Tasking Manager.</p>"},{"location":"manuals/project-managers/#introduction","title":"Introduction","text":"<p>A Mapping Campaign refers to an organized effort of collecting data from a particular geographic area/feature and creating maps. This may involve using various mapping technologies such as; GPS, satellite imagery, or crowdsourced data. These technologies are used to gather information about the area of interest.</p> <p>Mapping campaigns can be carried out for lots of different purposes, some examples are:</p> <ul> <li>Disaster Response and Recovery</li> <li>Environmental Conservation</li> <li>Urban planning or;</li> <li>Social and Political Activism.</li> </ul> <p>They often involve collaboration between organizations like; Government Agencies, Non-profit Groups and volunteers.</p> <p>Once the data is collected, it is analyzed and processed to create detailed maps that can have a variety of use cases. These could be:</p> <ul> <li>Identifying areas of need.</li> <li>Planning infrastructure and development projects.</li> <li>Understanding the impact of environmental changes on the landscape,   etc.</li> </ul>"},{"location":"manuals/project-managers/#an-overview-of-field-tm-in-relation-to-hot-osm-and-odk","title":"An Overview Of Field-TM In Relation To HOT, OSM and ODK","text":"<p>The Humanitarian OpenStreetMap Team (HOT) is a non-profit organization that uses open mapping data to support humanitarian and disaster response efforts around the world. The Field Mapping Task Manager (Field-TM) is one of the tools that HOT used to coordinate and manage mapping projects.</p> <p>Field-TM is a software tool that helps project managers to organize and manage mapping tasks. It assigns those tasks to volunteers and tracks their progress. The tool includes features for collaborative editing, data validation, and error detection. This ensures that the data collected by volunteers is accurate and reliable.</p> <p>Field-TM is designed to be used in conjunction with Open Data Kit (ODK). ODK is a free and open-source set of tools that allows users to create, collect, and manage data with mobile devices. The ODK provides a set of open-source tools that allow users to build forms, collect data in the field, and aggregate data on a central server. It is commonly used for data collection in research, monitoring and evaluation, and other development projects.</p> <p>Project managers use Field-TM to manage tasks and assign them to volunteers. The data collected by the volunteer via ODK is typically uploaded to OpenStreetMap (OSM) where it is used to create more detailed and accurate maps of the affected area. OSM is a free and open-source map of the world that is created and maintained by volunteers.</p> <p>Overall, the Field-TM tool is an important component of HOT's efforts to support disaster response and humanitarian efforts around the world. By coordinating mapping activities and ensuring the accuracy and reliability of the data collected by volunteers, Field-TM helps to provide critical information that can be used to support decision-making and improve the effectiveness of humanitarian efforts.</p>"},{"location":"manuals/project-managers/#prerequisites","title":"Prerequisites","text":"<ul> <li>Stable Internet connection.</li> <li>Basic bnowledge of field mapping. If you are new to mapping we suggest you   read this.</li> </ul>"},{"location":"manuals/project-managers/#steps-to-join-an-organization","title":"Steps to Join An Organization","text":"<p>You may request to join an existing organization.</p> <p>Alternatively, request the creation of a new organization for your team:</p> <p>Note</p> <pre><code>If you are already an organization manager, the button to do this will be\nhidden. Please contact the administrator to create a second organization.\n</code></pre> <ol> <li> <p>Go to the Manage organization tab. You can see the number of organizations.    On the top, there is a New button, clicking on which you can request    for a new organization.</p> </li> <li> <p>You have to provide your consent and fill up the form by providing    necessary details like Organization name, URL, Description of    organization, type of organization etc.    </p> </li> <li> <p>Now submit the form. The request will reach the Admin who will approve your    organization and inform you through the email.    </p> </li> </ol> <p>For small organisations, the organisation manager may also be the main project manager.</p> <p>All project manager permissions are granted to the organisation manager.</p>"},{"location":"manuals/project-managers/#steps-to-create-a-project-in-field-tm","title":"Steps To Create A Project In Field-TM","text":"<p>Project creation access is provided to users who have organisation admin or higher level of permission.</p> <p>Go to [fmtm] https://fmtm.hotosm.org/</p>"},{"location":"manuals/project-managers/#1-create-the-project-details","title":"1. Create the project details","text":"<ul> <li> <p>Login to fmtm first to see the option of creating the project.</p> <p></p> </li> </ul> <ul> <li>Start by filling in the project basic information such as the name,   description,   hashtag, etc. This captures essential information about your project.</li> </ul> <ul> <li>If you want to use drone imagery or any other high resolution base imagery,   you can add the TMS layer from this step.</li> </ul> <ul> <li>You can also choose whether you want to create public or private project   in Field-TM.</li> <li>You can also choose the option whether you want mappers to use ODK collect   mobile application or webform during this step. By default, webform will be   used.</li> </ul> <ul> <li> <p>Finally click Next to proceed.</p> <p></p> </li> </ul>"},{"location":"manuals/project-managers/#2-create-a-project-area","title":"2. Create a project area","text":"<ul> <li>You can draw a freehand polygon on a map interface or you can upload   the AOI file.</li> <li>Click on Upload file button to upload the AOI file. The file is only   supported by Geojson format. See preparing map features.</li> <li>Review the displayed map that corresponds to your selected area and   click on \"Next\".<pre><code>!!! tip\n\n      Confirm the exact area for the survey before creating the project,\n      as the project boundary cannot be edited once the project is created.\n\n![image](https://github.com/user-attachments/assets/64aeda34-c682-4fdc-8c2f-1fd83e29c61f)\n</code></pre> </li> </ul>"},{"location":"manuals/project-managers/#3-upload-the-survey-or-use-an-existing-one","title":"3. Upload the survey (or use an existing one)","text":"<ul> <li>You may choose to upload a pre-Configured XLSForm or browse the forms.   XLS Form Preparation</li> <li>Click the UploadXLSForm if you are uploading the file or download forms   by clicking Download form.</li> <li> <p>Finally click Next to proceed.</p> <p></p> </li> </ul>"},{"location":"manuals/project-managers/#4-select-the-geometry-type-you-wish-to-map","title":"4. Select the geometry type you wish to map","text":"<ul> <li>Select an option under 'What type of geometry?'</li> <li>If you want to upload your own, click in Upload custom mapdata or else   go with the default one of fetch data from OSM.</li> <li>You can also go for 'no existing data' option, if you want to collect map   features as well in field.</li> <li> <p>You can also upload additional map feature to have multiple feature   selection supported.</p> <p></p> </li> </ul>"},{"location":"manuals/project-managers/#5-task-splitting","title":"5. Task splitting","text":"<ul> <li>Option 1: Split project into squares.</li> <li>Option 2: Use the project area created as the task areas.   This could be a single task, or multiple task areas if uploaded.</li> <li>Option 3: The task splitting algorithm which splits   the tasks with average number of features which is provided by project   creator.<ul> <li> <p>The task splitting may take few seconds to few minutes considering   the feature count and size of AOI. Click on \"Submit\" to create project.</p> <p></p> </li> </ul> </li> </ul>"},{"location":"manuals/project-managers/#project-creation-tips","title":"Project Creation Tips","text":""},{"location":"manuals/project-managers/#preparing-map-features","title":"Preparing Map Features","text":"<ul> <li>Ensure you have the map features ready for the area you plan to   survey before starting project creation.</li> <li>The files should be in GeoJSON format, use the WGS coordinate   system with EPSG 4326, and must not include a Z-coordinate.   The map feature file should follow the osm tags structure.</li> <li> <p>Below is a sample of the required file structure:</p> <p>Example</p> <pre><code>{\n\u00a0 \u00a0\"type\": \"Feature\",\n\u00a0 \u00a0\"properties\": { \"full_id\": \"r9517874\",\n\u00a0 \u00a0 \u00a0 \"osm_id\": \"9517874\",\n\u00a0 \u00a0 \u00a0 \"osm_type\": \"relation\"\n\u00a0 \u00a0 \u00a0 \"tags\": {\"building\": \"yes\"},\n\u00a0 \u00a0 \u00a0 \"type\": \"multipolygon\",\n\u00a0 \u00a0 \u00a0 \"name\": \"\",\n\u00a0 \u00a0 \u00a0 \"building:levels\": \"\" },\n\u00a0 \u00a0\"geometry\": { \"type\": \"MultiPolygon\", \"coordinates\": [ [ [\n\u00a0 \u00a0 \u00a0 [ -3.9618848, 5.3041323 ],\n\u00a0 \u00a0 \u00a0 [ -3.9615121, 5.3041457 ],\n\u00a0 \u00a0 \u00a0 [ -3.9615028, 5.3038906 ],\n\u00a0 \u00a0 \u00a0 [ -3.9618755, 5.3038772 ],\n\u00a0 \u00a0 \u00a0 [ -3.9618848, 5.3041323 ]\n\u00a0 \u00a0],\n\u00a0 \u00a0[\n\u00a0 \u00a0 \u00a0 [ -3.9620167, 5.3042236 ],\n\u00a0 \u00a0 \u00a0 [ -3.9620143, 5.3041258 ],\n\u00a0 \u00a0 \u00a0 [ -3.9619839, 5.3041266 ],\n\u00a0 \u00a0 \u00a0 [ -3.9619757, 5.3037882 ],\n\u00a0 \u00a0 \u00a0 [ -3.9614038, 5.3038019 ],\n\u00a0 \u00a0 \u00a0 [ -3.9614144, 5.3042381 ],\n\u00a0 \u00a0 \u00a0 [ -3.9620167, 5.3042236 ]\n\u00a0 \u00a0] ] ] }\n}\n</code></pre> </li> </ul> <ul> <li>You may download features from OpenStreetMap (OSM) by clicking on   Fetch data from osm with Field-TM project creation; however, note that   Field-TM is not responsible for the data quality of features extracted   from OSM.</li> <li>Currently, available types of survey features are Buildings and   Healthcare only. We plan to add more types of features moving ahead.</li> <li>Project managers can also upload supporting map features. Note that   these secondary features can\u2019t be surveyed but selected for respective   primary features.</li> </ul>"},{"location":"manuals/project-managers/#xls-form-preparation","title":"XLS Form Preparation","text":"<ul> <li>Be prepared with the XLS form for the project.</li> <li>If updates are required to the form, you can edit the XLS form even   after the project is created.</li> <li>Note that a few fields in the beginning and end of the form will be   injected to ask for some feature verification.</li> <li>So project managers are requested to fill up the form through odk   or download the form after the project is created to know about the   field injected. You can also get the fields injected from our documentation   here</li> <li>Also read carefully the overview in the left section of each step to   understand the details of the functionalities.</li> </ul>"},{"location":"manuals/project-managers/#uploading-custom-imagery","title":"Uploading Custom Imagery","text":"<ul> <li>If you have custom imagery that you want to use as basemap during field   mapping activity, then you have to add the TMS link of that imagery   during the first step of project creation.</li> </ul> <ul> <li>Click on I would like to include my own imagery layer for reference   in the first step to add TMS URL. You can get URL by uploading it in   openaerialmap.</li> </ul>"},{"location":"manuals/project-managers/#odk-central-credentials","title":"ODK Central Credentials","text":"<ul> <li>To store your submissions in ODK Central, you need to have valid   ODK Central credentials.</li> <li>One option is to use your own organisations ODK server, if available.</li> <li>Another is to request access to use HOT's ODK server, which is free   to use for public project creation.</li> </ul>"},{"location":"manuals/project-managers/#steps-to-view-your-submissions-and-infographics","title":"Steps To View Your Submissions and Infographics","text":"<ol> <li>Go to the respective project. On the bottom left side,    you will see the view infographics button.</li> <li> <p>Click on the button will lead you to the infographics page.    </p> </li> <li> <p>On the right side there is an icon which will switch the layout to    table view, meaning you can see the submissions in table format.</p> </li> <li> <p>You can see the details of submission and also review the submission    and set the submission as accepted, rejected or has issues. Moreover,    you can also comment to the submission for mappers.    </p> </li> <li> <p>Users can also download the submission in Json or CSV format.</p> </li> <li>The submission can also be uploaded to JOSM. For that, you should    have JOSM software installed in your device and should have your remote    control enabled.    </li> </ol>"},{"location":"manuals/project-managers/#mapper-training","title":"Mapper Training","text":""},{"location":"manuals/project-managers/#during-training","title":"During Training","text":"<ol> <li>Make sure mapper has downloaded custom odk collect from    Field-TM website. You can also share the apk file if mappers    find it difficult to download by themselves.</li> <li>Share the link of the project for the mapper to reach    to the project easily. The URL be:    https://mapper.fmtm.hotosm.org/project_id</li> <li>Updating Metadata    If you need mappers to include their email    and phone number along with their username, guide them    to update their ODK Collect settings:<ul> <li>Navigate to Settings for the project.</li> <li>Click on User and Device Identity to update the    metadata fields.</li> </ul> </li> <li>Test Submissions    Encourage mappers to submit a few test entries to    familiarize themselves with the workflow and address    any issues during training.</li> </ol>"},{"location":"manuals/project-managers/#after-training","title":"After Training","text":"<ol> <li>Collect regular ongoing feedback from mappers to ensure they face no difficulties    during fieldwork.</li> <li>Prepare clear and detailed instructions for mappers    and validators, specific to the project requirements.</li> <li>Prepare the checklist for validation. The things to    check may depend on the type of project.</li> <li>Connect the odk central to powerBI or any other data visualisation tool via Odata    link to customise the charts and graphs as per your need. </li> </ol> <p>To get more info about project management in odk collect follow the guide Here.</p>"},{"location":"manuals/project-managers/#connecting-the-data-to-external-applications","title":"Connecting The Data To External Applications","text":"<p>If you want to visualise the submissions and create custom charts and diagrams using Field-TM submissions, then you can follow the steps below and load the submissions on any data analysis platform using OData.</p> <p>OData endpoints are a standardised way to ingest this data into other tools: PowerBI, Tableau, Redash, Grafana.</p> <p>Why PowerBI? You can use other tools too like Tableau, Redash, Grafana or even Excel. However, PowerBI is free to use, very powerful, and user friendly to use, despite being a proprietary Microsoft tool.</p> <p>The steps shows how to use PowerBI and create custom visualisations. ODK already has good docs on this which you can refer to. https://docs.getodk.org/tutorial-mapping-households/</p> <p>Step 1: Start a new project, add a new data source 'OData Feed'</p> <p>[Image here]</p> <p>Step 2: Use the OData URLs shown in the ODK docs: a. Submission data: /v1/projects/{projectId}/forms/{xmlFormId}.svc e.g. https://odk.hotosm.org/v1/projects/86/forms/df9135c8-84b1-4753-b348-e8963a8b4088.svc b. Entity data: /v1/projects/{projectId}/datasets/{name}.svc e.g. https://odk.hotosm.org/v1/projects/86/datasets/features.svc</p> <p>Step 3: Enter your credentials using Basic Auth</p> <p>Step 4: Preview the data</p> <p>Step 5: Transform data as needed, load into charts, graphs, etc, to create the dashboard you need.</p>"},{"location":"manuals/project-managers/#manage-project-and-users","title":"Manage project and users","text":""},{"location":"manuals/project-managers/#steps-to-edit-project-details","title":"Steps to Edit Project Details","text":"<ol> <li> <p>Users can also edit a few fields after project creation like basic    details like name, description, instructions as well as XLS form.</p> </li> <li> <p>Go to the respective project you want to edit. Click on the    manage button to edit basic details and XLS form.</p> <p></p> </li> </ol>"},{"location":"manuals/project-managers/#invite-users","title":"Invite Users","text":"<p>You can invite users (mappers and project managers to your project). If the user already exists in Feild-TM, they will be directly assigned role.</p> <p>If they are not registered on Field-TM,, the email invitation will be sent, following which users can get necessary permission to that project. You can invite users either through osm username or gmail.</p> <ol> <li>Choose the mode of invitation, either through osm or gmail.</li> <li>Provide respective osm username or email address. You can invite    multiple users at a time.</li> <li>Assign the role to users and click on invite.</li> <li>In case of gmail invitation, copy the link and share to that user    through other media.</li> </ol>"},{"location":"manuals/project-managers/#help-and-support","title":"Help and Support","text":"<p>If you encounter any issues or need assistance while using Field-TM, you can access the following resources:</p> <ul> <li>Check the FAQs .</li> <li>Ask your doubts in the Slack channel: #field-mapping-tasking-manager</li> </ul>"},{"location":"manuals/user-types-explained/","title":"Types Of User In Field-TM","text":""},{"location":"manuals/user-types-explained/#organisation-manager","title":"Organisation Manager","text":"<ul> <li>Oversee all projects within an organisation.</li> <li>Creating projects and assigning project managers to them.</li> <li>For a small organisation, the organisation manager may also be the project   manager.</li> </ul>"},{"location":"manuals/user-types-explained/#project-manager","title":"Project Manager","text":"<p>The Project Manager is tasked with coordinating all mapping activities, ensuring that Field Mappers are safe and qualified to work, as well as monitoring data quality.</p> <p>The Project Manager has to consider 3 main activities:</p> <ol> <li>Pre-field data collection activities<ul> <li>Setting up and testing tools</li> <li>Creating the data collection survey (XLSForm)</li> <li>Training field mappers (making sure that they understand the form and how    to fill it), and providing field instructions</li> <li>Creating an area of interest within the location to be mapped and    sub-dividing into tasks using the provided methods</li> </ul> </li> <li>Data collection activities<ul> <li>Preparing daily, weekly and monthly activity plans</li> <li>Deploying team (assessing safety and qualifications of mappers)</li> <li>Data quality monitoring</li> <li>Optionally allocating mappers to work of specific tasks, or fix    data quality issues</li> </ul> </li> <li>Post-field data collection activities<ul> <li>Daily review of data</li> <li>Giving and receiving team feedback</li> <li>Updating tools and methodoligies</li> </ul> </li> </ol>"},{"location":"manuals/user-types-explained/#field-mappers","title":"Field Mappers","text":"<p>Field mappers select (or are allocated) individual tasks within a project AOI and use the mobile app to gather data in those areas.</p> <p>They need to:</p> <ul> <li>Visit the mapper page available for the project they are working on:   https://mapper.fmtm.hotosm.org/{project_Id}</li> <li>Map existing or new features within the area of interest by following   the mapper guide</li> </ul>"},{"location":"manuals/user-types-explained/#validators","title":"Validators","text":"<p>Validators review the data collected by field mappers and assess its quality.</p> <p>If it requires more work, the validators either fix it themselves (for minor issues like spelling or capitalization mistakes that don't seem to be systematic), or inform the field mappers that they need to fix it.</p> <p>Some of the key requirements are:</p> <ul> <li>Understanding the mapping project and the intended use of the collected data</li> <li>Verifying the accuracy and completeness of the collected data</li> <li>Ensuring consistency with existing data and standards</li> <li>Providing clear and constructive feedback to field mappers and coordinators</li> </ul>"},{"location":"manuals/videos/","title":"Usage Videos","text":""},{"location":"manuals/videos/#organization-creation","title":"Organization Creation","text":""},{"location":"manuals/videos/#project-creation","title":"Project Creation","text":""},{"location":"manuals/videos/#adding-custom-imagery","title":"Adding Custom Imagery","text":""},{"location":"manuals/videos/#mapping","title":"Mapping","text":""},{"location":"manuals/videos/#old-video-tutorials","title":"Old Video Tutorials","text":"<p>There is no guarantee these videos are up to date, but they may be useful for some!</p> <p>https://github.com/user-attachments/assets/963e7b22-5752-4158-b12d-e67c643235b8</p> <p>https://github.com/user-attachments/assets/969e87e1-581c-4f76-93a7-0b4524b2db3a</p> <p>https://github.com/user-attachments/assets/82b200bc-620a-4712-8d2e-3dcc4c553230</p> <p>https://github.com/user-attachments/assets/03fe2d98-f441-4794-9a0d-5ae49722efed</p> <p>https://github.com/user-attachments/assets/a54ee33c-359c-46f9-b9a4-e58c909569c8</p>"},{"location":"manuals/workflow-diagrams/","title":"Workflow Diagrams","text":"<p>The super admin workflow covers the flow of Field-TM from beginning to end covering almost all functionalities.</p> <p>Link</p> <p> </p>"},{"location":"manuals/workflow-diagrams/#mapping","title":"Mapping","text":"<p>The field mapper can follow the steps below to carry on field mapping activities.</p> <p>Link</p> <p> </p>"},{"location":"manuals/workflow-diagrams/#validating","title":"Validating","text":"<p>The validator workflow covers the validation activities performed for the attributes collected from field survey.</p> <p>Link</p> <p> </p>"},{"location":"manuals/workflow-diagrams/#project-creation","title":"Project Creation","text":"<p>The project creation workflow consists of 5 steps. The Flow diagram for project creation is as below:</p> <p>Link</p> <p> </p>"},{"location":"manuals/workflow-diagrams/#organization-management","title":"Organization Management","text":"<p>The organisation management covers all the steps from organisation creation to viewing organisation details.</p> <p>Link</p> <p> </p>"},{"location":"manuals/workflow-diagrams/#project-management","title":"Project Management","text":"<p>The project managers will be responsible for creating the project as well as overall monitoring of mapping and validation process.</p>"},{"location":"manuals/xlsform-design/","title":"XLSForm Design (For People In A Hurry)","text":"<p>Adapted and updated from this document in osm-fieldwork.</p> <p>The full specification for XLSForms can be found here. A cheatsheet reference for XLSForm can be found here.</p>"},{"location":"manuals/xlsform-design/#xlsform-odk-terms","title":"XLSForm &amp; ODK Terms","text":"<p>A few terms should be explained:</p> <ul> <li>XLSForm: a spreadsheet containing your survey questions.<ul> <li>Simply a <code>.xls</code> or <code>.xlsx</code> file.</li> <li>Can be created with any tool like Microsoft Excel, LibreOffice Calc.</li> <li>Include text and a small amount of spreadsheet logic to generate values.</li> </ul> </li> <li>XForm: an XLSForm that is converted to XML format read by ODK tools.</li> <li>ODK Central: the server where XForms are stored, plus related submissions.</li> <li>ODK Collect: the mobile app to load the XForm to make submissions from.</li> <li>XForm ID: the ID reference of the XForm in ODK.</li> <li>XForm Title: the friendly name of the survey form that the user sees.</li> <li>Entity: a fancy term for map <code>features</code>, or commonly for our use case,   <code>buildings</code>. Each Entity is a feature to be mapped.</li> <li>Entity List: a collection of Entities stored on ODK Central.</li> <li>Choices List: a group of pre-defined options / answers to a survey   question.</li> </ul>"},{"location":"manuals/xlsform-design/#xlsform-sheets-tabs","title":"XLSForm Sheets (Tabs)","text":"<ul> <li>There are four options for sheet (or tab) names:<ul> <li><code>settings</code> - metadata like XForm ID &amp; XForm Title.</li> <li><code>survey</code> - the actual question data to ask the user.</li> <li><code>choices</code> - different options to select are stored.</li> <li><code>entities</code> - metadata about the related Entity list for a project.</li> </ul> </li> </ul>"},{"location":"manuals/xlsform-design/#settings-sheet","title":"Settings Sheet","text":"<ul> <li><code>form_id</code>: XForm ID above.</li> <li><code>version</code>: Can be any value, but it is advised to use a date and time via   spreadsheet formula <code>=NOW()</code>.</li> <li><code>form_title</code>: XForm Title above.</li> </ul>"},{"location":"manuals/xlsform-design/#entities-sheet","title":"Entities Sheet","text":"<ul> <li>Entities were introduced to ODK Central recently in order to more easily track   the same feature over time.</li> <li>We now have a nice way to store a feature, with geometry and properties, in   ODK Central (for example the buildings you wish to map!).</li> <li>The geometry can then be selected in ODK Collect survey questions.</li> </ul> <ul> <li><code>list_name</code>: The Entity List name in ODK.</li> <li><code>entity_id</code>: A reference to a field in your survey sheet, such as building ID.</li> <li><code>update_if</code>: If set <code>true()</code>, the Entity will be updated on form submission,   else no update will take place.</li> <li><code>label</code>: A descriptive user-facing name for the Entity. This can include logic   to add text or symbols based on a field in the survey sheet (for example,   mapping status).</li> </ul>"},{"location":"manuals/xlsform-design/#choices-sheet","title":"Choices Sheet","text":"<ul> <li>Contains options that can be used to answer a survey question.</li> <li>These are used instead of 'free text' input for consistent answers.</li> </ul> <ul> <li><code>list_name</code>: The Choices List name that can be referenced in the survey.</li> <li><code>name</code>: The value that can be selected as the question answer.</li> <li><code>label</code>: A description of the choice, displayed in ODK Collect.</li> </ul>"},{"location":"manuals/xlsform-design/#survey-sheet","title":"Survey Sheet","text":"<ul> <li>The main part of the form - the questions for the survey!</li> </ul>"},{"location":"manuals/xlsform-design/#translations","title":"Translations","text":"<ul> <li>Ideally two letter ISO codes should be used, along with a label,   e.g. <code>image::english(en)</code>.</li> <li>Note the important thing is consistency of usage. The ISO codes   are not actually validated. So as long as they match <code>en</code>   throughout the form, everything should work.</li> <li>As a consequence, it is entirely valid to use language variants,   such as <code>pt-BR</code> for Brazilian Portuguese, as long as you are   consistent.</li> </ul>"},{"location":"manuals/xlsform-design/#media-files-gotcha","title":"Media Files Gotcha","text":"<ul> <li>In the <code>choices</code> label, if you include any translated fields, such   as <code>label::spanish(es)</code>, then references to media files must   also be translated.</li> <li>For example, you need to have an image field for every available   translation in your form: <code>image::english(en)=file.jpg</code> and   <code>image::spanish(es)=file.jpg</code>.</li> <li>The image file could be the same for each language, or a   different file for each language.</li> </ul>"},{"location":"manuals/xlsform-design/#creating-entities","title":"Creating Entities","text":"<ul> <li>For the XLSForm to reference an Entity List for data collection, the Entity   List must first exist in ODK Central.</li> <li>There are two ways described below.</li> </ul>"},{"location":"manuals/xlsform-design/#1-from-the-odk-central-ui","title":"1. From The ODK Central UI","text":"<ul> <li>Easiest approach via the user interface of ODK Collect.</li> <li>First we generate the Entity List via the UI, with all the fields we   want included:</li> </ul> <p>A single field <code>geometry</code> would be acceptable, but it can be useful to add other fields as references, for example including a mapping <code>status</code> field.</p> <ul> <li>Next we need to generate a <code>.csv</code> containing our geometries we want to map,   including the fields we defined above.</li> <li>The <code>geometry</code> field must be in JavaRosa geometry format.</li> <li>Example JavaRosa polygon (semicolon separated):</li> </ul> <pre><code>-8.38071535576881 115.640801902838 0.0 0.0;\n-8.38074220774489 115.640848633963 0.0 0.0;\n-8.38080128208577 115.640815355738 0.0 0.0;\n-8.38077407987063 115.640767444534 0.0 0.0;\n-8.38071535576881 115.640801902838 0.0 0.0\n</code></pre> <p></p> <p>The example CSV can be downloaded here</p> <ul> <li>Now this CSV can be uploaded via the UI and the Entity List will be populated.</li> </ul>"},{"location":"manuals/xlsform-design/#2-via-entity-list-xlsform-upload","title":"2. Via Entity List XLSForm Upload","text":"<ul> <li>This is quite a convoluted approach, as a separate XLSForm must be   uploaded to do this.</li> <li>An example Entity registration form can be found   here.</li> <li>In the end, we will have two XLSForms. One for Entity List creation,   and another for the actual data collection.</li> <li>The key part of this form is in the <code>survey</code> sheet, where the Entity data   fields are defined:</li> </ul> <ul> <li>We will cover in the Survey Sheet section more details of   the specifics here, but as you can see we have:<ul> <li>A field type to help determine which kind of data we have.</li> <li>A field name that should match those defined in the features CSV file.</li> <li>A field label to display to the user.</li> <li>A <code>save_to</code> field to specify which Entity field / property the data will be   saved to when submitted. This should probably match the field name.</li> </ul> </li> <li>The form to create the Entity List is then uploaded to ODK Central:</li> </ul>"},{"location":"manuals/xlsform-design/#3-from-code-api","title":"3. From Code (API)","text":""},{"location":"manuals/xlsform-design/#injected-fields-in-the-field-tm-xls-form","title":"Injected Fields in the Field-TM XLS Form","text":"<p>During project creation in the Field Tasking Manager (Field-TM), specific fields and questions are automatically injected into the XLS form to assess digitization status and support the data conflation process. Below is an overview of the injected fields and their purposes:</p> <ol> <li>The rows are added to record essential metadata like date, username,    phone number, device ID and email address of the mapper.</li> <li>We also take the user's realtime location</li> <li>The question for feature selection is added on default to access    selecting of entity to be mapped during survey.</li> <li>If no feature is selected, the user would be prompted to take a GPS coordinate    of new feature.    Note: One of these two options must be filled up to proceed.</li> <li>We also dedicate few rows for calculating OSM ID,    Task ID and mapping status used on Field-TM.</li> <li>We then ask mappers to answer if the feature exist in reality?    If yes, user proceeds with form submission.</li> <li>If no, the user is prompted to capture an image (if available) and the form    is terminated with a message:    \"You cannot proceed with data acquisition if the building does not exist.\"</li> </ol> <p>The another set of questions injected are digitisation verification related questions. These questions are used for data conflation process i.e. merging the data to osm. These questions include:</p> <ol> <li>Is the digitized location for this feature correct?    If incorrect, users are asked: \"What is wrong with the digitization?\"    Options provided are:    Lumped \u2013 Multiple buildings digitized as a single polygon.    Split \u2013 A single building digitized as multiple polygons.    Other \u2013 Users can provide a custom explanation in a text field.    In case of other, user can input the their answer on text form.</li> <li>In all cases, users have the option to upload images to support    their responses. However, its an optional field.    The translated fields are also available in multiple languages,    including French and Spanish.    Below is the sample of injected fields.</li> </ol> <p>mandatory_fields (3).xls</p>"},{"location":"manuals/xlsform-design/#entity-properties","title":"Entity Properties","text":"<ul> <li>Entities can have any arbitrary properties added to them.</li> <li>All properties stored a text data, even if the underlying data   may be a number, e.g. \"2\".</li> <li>There are a few special properties that that can be added and recognized by   the system:<ul> <li><code>geometry</code>: used to display the entity geometry in Collect / Web Forms.</li> <li><code>marker-color</code>: the colour of a marker symbol, in hex, e.g. #aaccee.</li> <li><code>marker-symbol</code>: point data symbol to use, can be an emoji.</li> <li><code>stroke</code>: the colour of polygon / polyline lines.</li> <li><code>stroke-width</code>: the width of the polygon / polyline lines.</li> <li><code>fill</code>: fill colour used for polygons.</li> </ul> </li> <li>These properties can be updated within forms, enabling dynamic workflows   that change entity colours on the map (e.g. green = submitted).</li> </ul>"}]}